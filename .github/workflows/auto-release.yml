name: Automated Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (semver)'
        required: true
      chartVersion:
        description: 'Chart Version (semver)'
        required: true

env:
  MAVEN_CLI_OPTS: --batch-mode --no-transfer-progress

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    env:
      CHANGELOG: CHANGELOG.md
      RELEASE_NOTES_FILENAME: release_notes
      RELEASE_NOTES_FULLNAME: release_notes.md
    outputs:
      create_pr: ${{ env.CREATE_PR }}
      next_chart_version_snapshot: ${{ env.NEXT_CHART_VERSION_SNAPSHOT }}
      next_version_snapshot: ${{ env.NEXT_VERSION_SNAPSHOT }}
      pr_title: ${{ env.PR_TITLE }}
      release_branch: ${{ env.RELEASE_BRANCH }}

    steps:
      - name: Parse Version
        id: version_parser
        uses: terradatum/semver-action@v1
        with:
          bump: preminor
          version: ${{ github.event.inputs.version }}

      - name: Parse Chart Version
        id: chart_version_parser
        uses: terradatum/semver-action@v1
        with:
          bump: preminor
          version: ${{ github.event.inputs.chartVersion }}

      - name: Set Prerelease
        if: ${{ contains(steps.version_parser.outputs.version, '-') }}
        run: echo "PRERELEASE=true" >> $GITHUB_ENV

      - name: Retrieve the Milestone
        id: milestone
        if: ${{ env.PRERELEASE != 'true' }}
        uses: julb/action-manage-milestone@v1
        with:
          title: Mirror ${{ steps.version_parser.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Milestone Data
        id: milestone-data
        if: ${{ steps.milestone.outputs.number != '' }}
        uses: Beakyn/gha-get-milestone-data@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          repository: ${{ github.repository }}
          milestone: ${{ steps.milestone.outputs.number }}

      - name: Set Release Environment Variables
        run: |
          NEXT_CHART_VERSION_SNAPSHOT=${{ format('{0}.{1}.0-SNAPSHOT', steps.chart_version_parser.outputs.major, steps.chart_version_parser.outputs.next-minor) }}
          NEXT_VERSION_SNAPSHOT=${{ format('{0}.{1}.0-SNAPSHOT', steps.version_parser.outputs.major, steps.version_parser.outputs.next-minor) }}
          RELEASE_BRANCH="release/${{ steps.version_parser.outputs.major }}.${{ steps.version_parser.outputs.minor }}"
          RELEASE_TAG=v${{ steps.version_parser.outputs.version }}

          if [ ! -z "${{ steps.milestone.outputs.number }}" ]; then
            CREATE_PR=true
            PR_TITLE="Merge changes from $RELEASE_BRANCH"
          fi

          cat >> $GITHUB_ENV <<EOF
          CREATE_PR=$CREATE_PR
          NEXT_CHART_VERSION_SNAPSHOT=$NEXT_CHART_VERSION_SNAPSHOT
          NEXT_VERSION_SNAPSHOT=$NEXT_VERSION_SNAPSHOT
          PR_TITLE=$PR_TITLE
          RELEASE_BRANCH=$RELEASE_BRANCH
          RELEASE_TAG=$RELEASE_TAG
          EOF

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: master
          token: ${{ secrets.HEDERA_BOT_TOKEN }}

      - name: Import GPG Key
        id: gpg_importer
        uses: crazy-max/ghaction-import-gpg@v3.1.0
        with:
          git-commit-gpgsign: true
          git-tag-gpgsign: true
          git-user-signingkey: true
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Cache Maven Packages
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-m2-${{ hashFiles('pom.xml') }}
          path: ~/.m2
          restore-keys: ${{ runner.os }}-m2

      - name: Create and Switch to Release Branch
        run: |
          if ! git ls-remote --exit-code --heads --quiet origin refs/heads/${RELEASE_BRANCH}; then
            git checkout -b ${RELEASE_BRANCH}
            git push -u origin ${RELEASE_BRANCH}

            if [ -z "${{ steps.milestone.outputs.number }}" ]; then
              echo "CREATE_PR=true" >> $GITHUB_ENV
              echo "PR_TITLE=Bump versions for v$NEXT_VERSION_SNAPSHOT" >> $GITHUB_ENV
            fi
          else
            git checkout ${RELEASE_BRANCH}
          fi

      - name: Maven Release
        run: ./mvnw clean package $MAVEN_CLI_OPTS -Drelease.version=$VERSION -Drelease.chartVersion=$CHART_VERSION -Ddocker.tag.version=$VERSION -N -P=release
        env:
          VERSION: ${{ steps.version_parser.outputs.version }}
          CHART_VERSION: ${{ steps.chart_version_parser.outputs.version }}

      - name: Create Release Notes
        if: ${{ steps.milestone.outputs.number != '' }}
        uses: xin-hedera/release-notes-generator-action@v3.1.5-rc1
        env:
          FILENAME: ${{ env.RELEASE_NOTES_FILENAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MILESTONE_NUMBER: ${{ steps.milestone.outputs.number }}

      - name: Update Changelog
        if: ${{ steps.milestone.outputs.number != '' }}
        run: |
          DESCRIPTION="${{ fromJson(steps.milestone-data.outputs.data).description }}"
          RELEASE_DATE=$(date +%Y-%m-%d)

          GITHUB_RELEASE_NOTES=$(mktemp --suffix .md)
          TMP_CHANGELOG=$(mktemp --suffix .md)
          TMP_RELEASE_NOTES=$(mktemp --suffix .md)

          # copy to a temporary file for modification due to lack of write permsision
          echo -e "$DESCRIPTION\n" | sed 's/\r$//' | cat - $RELEASE_NOTES_FULLNAME > $GITHUB_RELEASE_NOTES
          RELEASE_NOTES=$(sed -r 's/^(#+) /\1# /g' $GITHUB_RELEASE_NOTES)

          CHANGELOG_TITLE="# Hedera Mirror Node Changelog"
          CHANGELOG_PREVIOUS=$(sed 'N; N; 0,/^'"$CHANGELOG_TITLE"'\n.*\n/s///' $CHANGELOG)
          cat > $CHANGELOG <<EOF
          $CHANGELOG_TITLE

          ## ${{ steps.version_parser.outputs.version }} ($RELEASE_DATE)

          $RELEASE_NOTES

          $CHANGELOG_PREVIOUS
          EOF

          echo "GITHUB_RELEASE_NOTES=$GITHUB_RELEASE_NOTES" >> $GITHUB_ENV

      - name: Commit and Tag
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_author: ${{ steps.gpg_importer.outputs.name }} <${{ steps.gpg_importer.outputs.email }}>
          commit_message: Bump versions for ${{ env.RELEASE_TAG }}
          commit_options: '--no-verify --signoff'
          commit_user_name: ${{ steps.gpg_importer.outputs.name }}
          commit_user_email: ${{ steps.gpg_importer.outputs.email }}
          tagging_message: ${{ env.RELEASE_TAG }}

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: ${{ env.GITHUB_RELEASE_NOTES }}
          commit: ${{ env.RELEASE_BRANCH }}
          draft: true
          name: ${{ env.RELEASE_TAG }}
          prerelease: ${{ env.PRERELEASE == 'true' }}
          tag: ${{ env.RELEASE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Close the Milestone
        if: ${{ steps.milestone.outputs.number != '' }}
        uses: julb/action-manage-milestone@v1
        with:
          title: Mirror ${{ steps.version_parser.outputs.version }}
          state: closed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create_pr:
    name: Create PR
    runs-on: ubuntu-latest
    needs: release
    if: ${{ needs.release.outputs.create_pr == 'true' }}
    env:
      NEXT_CHART_VERSION_SNAPSHOT: ${{ needs.release.outputs.next_chart_version_snapshot }}
      NEXT_VERSION_SNAPSHOT: ${{ needs.release.outputs.next_version_snapshot }}
      RELEASE_BRANCH: ${{ needs.release.outputs.release_branch }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Import GPG Key
        id: gpg_importer
        uses: crazy-max/ghaction-import-gpg@v3.1.0
        with:
          git-commit-gpgsign: true
          git-tag-gpgsign: true
          git-user-signingkey: true
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Cache Maven Packages
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-m2-${{ hashFiles('pom.xml') }}
          path: ~/.m2
          restore-keys: ${{ runner.os }}-m2

      - name: Reset Master to Release Branch
        run: |
          git fetch origin $RELEASE_BRANCH:$RELEASE_BRANCH
          git reset --hard $RELEASE_BRANCH

      - name: Maven Release for Next Minor Snapshot
        run: ./mvnw clean package $MAVEN_CLI_OPTS -Drelease.version=$NEXT_VERSION_SNAPSHOT -Drelease.chartVersion=$NEXT_CHART_VERSION_SNAPSHOT -Ddocker.tag.version=master -N -P=release

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          body: ''
          branch: create-pull-request/${{ env.RELEASE_BRANCH }}
          commit-message: Bump versions for v${{ env.NEXT_VERSION_SNAPSHOT }}
          committer: ${{ steps.gpg_importer.outputs.name }} <${{ steps.gpg_importer.outputs.email }}>
          author: ${{ steps.gpg_importer.outputs.name }} <${{ steps.gpg_importer.outputs.email }}>
          delete-branch: true
          signoff: true
          title: ${{ needs.release.outputs.pr_title }}
          token: ${{ secrets.HEDERA_BOT_TOKEN }}
