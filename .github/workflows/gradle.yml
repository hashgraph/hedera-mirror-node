name: "Gradle"

on:
  pull_request:
    branches: [main, release/**]
  push:
    branches: [main, release/**]
    tags: [v*]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project:
          [
            common,
            graphql,
            grpc,
            importer,
            monitor,
            rest,
            rest-java,
            "rest:check-state-proof",
            "rest:monitoring",
            rosetta,
            test,
            web3,
          ]
        schema: [v1, v2]
        exclude:
          - project: common
            schema: v2
          - project: monitor
            schema: v2
          - project: rest:check-state-proof
            schema: v2
          - project: rest:monitoring
            schema: v2
          - project: rosetta
            schema: v2
          - project: test
            schema: v2
    timeout-minutes: 20
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit

      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2

      - uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
        with:
          distribution: temurin
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@e24011a3b5db78bd5ab798036042d9312002f252 # v3.2.0

      - name: Execute Gradle
        env:
          MIRROR_NODE_SCHEMA: ${{ matrix.schema}}
          SPRING_PROFILES_ACTIVE: ${{ matrix.schema}}
        run: ./gradlew :${{matrix.project}}:build --scan ${{ secrets.GRADLE_ARGS }}

      - name: Upload coverage report
        uses: codecov/codecov-action@7afa10ed9b269c561c2336fd862446844e0cbf71 # v4.2.0
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        if: always() && matrix.schema == 'v1' && matrix.project != 'rest:monitoring' && matrix.project != 'test'
