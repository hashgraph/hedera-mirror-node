// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`extractTokenMultiUnionQuery throw spender.id multiple equal 1`] = `"Only one equal (eq) operator is allowed for spender.id"`;

exports[`extractTokenMultiUnionQuery throw spender.id multiple lower bounds 1`] = `"Only one gt/gte operator is allowed for spender.id"`;

exports[`extractTokenMultiUnionQuery throw spender.id multiple upper bounds 1`] = `"Only one lt/lte operator is allowed for spender.id"`;

exports[`extractTokenMultiUnionQuery throw spender.id ne 1`] = `"Not equal (ne) operator is not supported for spender.id"`;

exports[`extractTokenMultiUnionQuery throw spender.id range and equal 1`] = `"Can't support both range and equal for spender.id"`;

exports[`extractTokenMultiUnionQuery throw token.id eq without spender.id query 1`] = `"token.id without a spender.id parameter filter"`;

exports[`extractTokenMultiUnionQuery throw token.id gt with spender.id gt 1`] = `"spender.id must have gte or eq operator"`;

exports[`extractTokenMultiUnionQuery throw token.id gt without spender.id query 1`] = `"token.id without a spender.id parameter filter"`;

exports[`extractTokenMultiUnionQuery throw token.id lt with spender.id lt 1`] = `"spender.id must have lte or eq operator"`;

exports[`extractTokenMultiUnionQuery throw token.id lt without spender.id query 1`] = `"token.id without a spender.id parameter filter"`;

exports[`extractTokenMultiUnionQuery throw token.id multiple equal 1`] = `"Only one equal (eq) operator is allowed for token.id"`;

exports[`extractTokenMultiUnionQuery throw token.id multiple lower bounds 1`] = `"Only one gt/gte operator is allowed for token.id"`;

exports[`extractTokenMultiUnionQuery throw token.id multiple upper bounds 1`] = `"Only one lt/lte operator is allowed for token.id"`;

exports[`extractTokenMultiUnionQuery throw token.id ne 1`] = `"Not equal (ne) operator is not supported for token.id"`;

exports[`extractTokenMultiUnionQuery throw token.id range and equal 1`] = `"Can't support both range and equal for token.id"`;
