package com.hedera.mirror.common.domain.transaction;

import org.apache.tuweni.bytes.Bytes;
import org.junit.jupiter.api.Test;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.*;

public class LogsBloomFilterTest {

    @Test
    void getLogsBloomWhenEmpty() {
        assertThat(new LogsBloomFilter().getBloom()).isEqualTo(new byte[0]);
    }

    @Test
    void getLogsBloom() {
        byte[] bloom = new LogsBloomFilter((List.of(new byte[] {0, 1, 2}))).getBloom();
        assertThat(bloom).isEqualTo(
                new byte[] {0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0});
        assertThat(bloom.length).isEqualTo(256);
    }

    @Test
    void getLogsBloomInsertBytesTest() {
        byte[] bytes1 = {-105, 32, 78, -1, -19, -26, 125, 15, -14, 80, -75, 3, -62, -57, -35, 14, -69, -80, 43, 113};
        byte[] bytes2 = {52, 33, 99, -54, -4, 126, -64, -78, -115, -70, -122, 43, 127, 54, -95, -40, -25, 84, 11, 59};
        byte[] bytes3 = {-38, -27, -17, 3, -55, -10, -13, 29, -50, -61, -97, 19, -9, -2, 38, -121, -104, 103, -34, -52};

        LogsBloomFilter bloomFilter = new LogsBloomFilter();
        bloomFilter.insertBytes(bytes1);
        byte[] expectedResult = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0};
        assertThat(bloomFilter.getBloom()).isNotEqualTo(expectedResult);
        bloomFilter.insertBytes(bytes2);
        assertThat(bloomFilter.getBloom()).isNotEqualTo(expectedResult);
        bloomFilter.insertBytes(bytes3);
        assertThat(bloomFilter.getBloom()).isEqualTo(expectedResult);

        // Already inserted bytes should not change the filter
        bloomFilter.insertBytes(bytes3);
        assertThat(bloomFilter.getBloom()).isEqualTo(expectedResult);
    }

    @Test
    void besuHexStringTest() {
        // Hex String given as an example for the LogsBloomFilter from Besu
        byte[] expectedResult = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        String logsBloomHexString = "0x0F572E5295C57F15886F9B263E2F6D2D6C7B5EC6";
        byte[] logsBloom = new LogsBloomFilter(List.of(Bytes.fromHexString(logsBloomHexString).toArray())).getBloom();
        assertThat(expectedResult).isEqualTo(logsBloom);
    }

    @Test
    void contractResultsTest() {
        // From https://testnet.mirrornode.hedera.com/api/v1/contracts/0.0.29593659/results
        Bytes contractResultBloom1 = Bytes.fromHexString("0x
        // From https://testnet.mirrornode.hedera.com/api/v1/contracts/0.0.34392571/results
        Bytes contractResultBloom2 = Bytes.fromHexString("0x

        LogsBloomFilter bloomFilter = new LogsBloomFilter(List.of(contractResultBloom1.toArray(), contractResultBloom2.toArray()));

        Bytes expectedResult = Bytes.fromHexString("0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000040000000000000000000000000000800000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000");
        assertThat(expectedResult.toArray()).isEqualTo(bloomFilter.getBloom());
    }

    @Test
    void bloomFilterContainsTest() {
        // https://testnet.mirrornode.hedera.com/api/v1/contracts/0.0.29593659/results
        Bytes contractResultBloom1 = Bytes.fromHexString("0x00000000002000000000000000000000000000000000000000000000000200000000000000000000000000000000000000100000000000000000000000000000000000000020000000000008000000000000000000000000000000000002000000000000020000000000000000000800000000000000400000000010000000000000800000000000000000000000000000000000000040000000000000000000000080000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000");
        // https://testnet.mirrornode.hedera.com/api/v1/contracts/0.0.34392571/results
        Bytes contractResultBloom2 = Bytes.fromHexString("0x

        LogsBloomFilter bloomFilter = new LogsBloomFilter(List.of(contractResultBloom1.toArray(), contractResultBloom2.toArray()));

        assertTrue(bloomFilter.couldContain(contractResultBloom1.toArray()));
        assertTrue(bloomFilter.couldContain(contractResultBloom2.toArray()));
        Bytes contractResultBloom3 = Bytes.fromHexString("0x
        assertFalse(bloomFilter.couldContain(contractResultBloom3.toArray()));
    }
}
