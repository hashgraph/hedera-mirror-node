affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          topologyKey: kubernetes.io/hostname
          labelSelector:
            matchLabels:
              app.kubernetes.io/component: monitor

alertmanager:
  inhibitRules:
    enabled: false

    InhibitHandleLatencyAlertWhenHighPublishLatency:
      enabled: true
      matches:
        - sourceMatch:
            - name: alertname
              value: MonitorPublishLatency
          targetMatch:
            - name: alertname
              value: MonitorPublishToHandleLatency
          equal:
            - namespace
            - pod

    InhibitLogAlertWhenHighPublishErrors:
      enabled: true
      matches:
        - sourceMatch:
            - name: alertname
              value: MonitorPublishErrors
          targetMatch:
            - name: alertname
              value: MonitorLog4j2Errors
          equal:
            - namespace
            - pod

    InhibitAllWhenPodIssues:
      enabled: true
      matches:
        - sourceMatch:
            - name: area
              value: resource
          targetMatch:
            - name: application
              value: hedera-mirror-monitor
          equal:
            - namespace
            - pod

    InhibitPublishAlertsWhenPublishStopped:
      enabled: true
      matches:
        - sourceMatch:
            - name: alertname
              value: MonitorPublishStopped
          targetMatch:
            - name: mode
              value: publish
          equal:
            - namespace
            - pod

annotations: {}

config: {}

# Environment variables to add to the container. The value can either be a string or an EnvVarSource. Evaluated as a template.
env:
  SPRING_CLOUD_KUBERNETES_ENABLED: "true"
  SPRING_CONFIG_ADDITIONAL_LOCATION: "file:/usr/etc/hedera/"
  # FOO:
  #   valueFrom:
  #     secretKeyRef:
  #       name: '{{ .Release.Name }}-custom'
  #       key: BAR

# Add config maps or secrets as environment variables. Evaluated as a template.
envFrom: []
# - secretRef:
#     name: '{{ .Release.Name }}-env'

fullnameOverride: ""

global:
  image: {}
  namespaceOverride: ""
  podAnnotations: {}

image:
  pullPolicy: IfNotPresent
  repository: gcr.io/mirrornode/hedera-mirror-monitor
  tag: ""  # Defaults to the chart's app version

imagePullSecrets: []

ingress:
  annotations:
    traefik.ingress.kubernetes.io/router.middlewares: '{{ include "hedera-mirror-monitor.namespace" . }}-{{ include "hedera-mirror-monitor.fullname" . }}@kubernetescrd'
  enabled: true
  hosts:
    - host: ""
      paths: ["/monitor/api"]
  middleware:
    enabled: false
  tls:
    enabled: false
    secretName: ""

labels: {}

livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: http
  initialDelaySeconds: 150
  periodSeconds: 10
  timeoutSeconds: 2

nodeSelector: {}

podAnnotations: {}

podSecurityContext:
  fsGroup: 1000

priorityClassName: ""

prometheusRules:
  enabled: false
  MonitorHighCPU:
    annotations:
      description: "{{ $labels.namespace }}/{{ $labels.pod }} CPU usage reached {{ $value | humanizePercentage }}"
      summary: "Mirror Monitor CPU usage exceeds 80%"
    enabled: true
    expr: sum(process_cpu_usage{application="hedera-mirror-monitor"}) by (namespace, pod) / sum(system_cpu_count{application="hedera-mirror-monitor"}) by (namespace, pod) > 0.8
    for: 5m
    labels:
      severity: critical
      application: hedera-mirror-monitor
      area: resource

  MonitorHighMemory:
    annotations:
      description: "{{ $labels.namespace }}/{{ $labels.pod }} memory usage reached {{ $value | humanizePercentage }}"
      summary: "Mirror Monitor memory usage exceeds 80%"
    enabled: true
    expr: sum(jvm_memory_used_bytes{application="hedera-mirror-monitor"}) by (namespace, pod) / sum(jvm_memory_max_bytes{application="hedera-mirror-monitor"}) by (namespace, pod) > 0.8
    for: 5m
    labels:
      severity: critical
      application: hedera-mirror-monitor
      area: resource

  MonitorLog4j2Errors:
    annotations:
      description: "Logs for {{ $labels.namespace }}/{{ $labels.pod }} have reached {{ $value }} error messages/s in a 3m period"
      summary: "High rate of log4j2 errors"
    enabled: true
    expr: sum(increase(log4j2_events_total{application="hedera-mirror-monitor", level="error"}[2m])) by (namespace, pod) >= 2
    for: 3m
    labels:
      severity: critical
      application: hedera-mirror-monitor

  MonitorNoPodsReady:
    annotations:
      description: "No monitor instances are currently running in {{ $labels.namespace }}"
      summary: No monitor instances running
    enabled: true
    expr: sum(kube_pod_container_status_ready{container="monitor"}) by (namespace) < 1
    for: 2m
    labels:
      severity: critical
      application: hedera-mirror-monitor
      area: resource

  MonitorPublishErrors:
    annotations:
      description: "Averaging {{ $value | humanizePercentage }} error rate publishing '{{ $labels.scenario }}' scenario from {{ $labels.namespace }}/{{ $labels.pod }}"
      summary: "Publish error rate exceeds 5%"
    enabled: true
    expr: sum(rate(hedera_mirror_monitor_publish_submit_seconds_sum{application="hedera-mirror-monitor",status!="SUCCESS"}[2m])) by (namespace, pod, scenario) / sum(rate(hedera_mirror_monitor_publish_submit_seconds_count{application="hedera-mirror-monitor"}[2m])) by (namespace, pod, scenario) > 0.05
    for: 2m
    labels:
      severity: critical
      application: hedera-mirror-monitor
      mode: publish

  MonitorPublishLatency:
    annotations:
      description: "Averaging {{ $value | humanizeDuration }} publish latency for '{{ $labels.scenario }}' scenario for {{ $labels.namespace }}/{{ $labels.pod }}"
      summary: "Publish latency exceeds 5s"
    enabled: true
    expr: sum(rate(hedera_mirror_monitor_publish_submit_seconds_sum{application="hedera-mirror-monitor"}[2m])) by (namespace, pod, scenario) / sum(rate(hedera_mirror_monitor_publish_submit_seconds_count{application="hedera-mirror-monitor"}[2m])) by (namespace, pod, scenario) > 5
    for: 2m
    labels:
      severity: critical
      application: hedera-mirror-monitor
      mode: publish

  MonitorPublishStopped:
    annotations:
      description: "Publish TPS dropped to {{ $value }} for '{{ $labels.scenario }}' scenario for {{ $labels.namespace }}/{{ $labels.pod }}"
      summary: "Publishing stopped"
    enabled: true
    expr: sum(rate(hedera_mirror_monitor_publish_submit_seconds_sum{application="hedera-mirror-monitor"}[2m])) by (namespace, pod, scenario) / sum(rate(hedera_mirror_monitor_publish_submit_seconds_count{application="hedera-mirror-monitor"}[2m])) by (namespace, pod, scenario) <= 0
    for: 2m
    labels:
      severity: critical
      application: hedera-mirror-monitor
      mode: publish

  MonitorPublishToHandleLatency:
    annotations:
      description: "Averaging {{ $value | humanizeDuration }} transaction latency for '{{ $labels.scenario }}' scenario for {{ $labels.namespace }}/{{ $labels.pod }}"
      summary: "Submit to transaction being handled latency exceeds 8s"
    enabled: true
    expr: sum(rate(hedera_mirror_monitor_publish_handle_seconds_sum{application="hedera-mirror-monitor"}[2m])) by (namespace, pod, scenario) / sum(rate(hedera_mirror_monitor_publish_handle_seconds_count{application="hedera-mirror-monitor"}[2m])) by (namespace, pod, scenario) > 8
    for: 2m
    labels:
      severity: warning
      application: hedera-mirror-monitor
      mode: publish

  MonitorSubscribeLatency:
    annotations:
      description: "Latency averaging {{ $value | humanizeDuration }} for '{{ $labels.scenario }}' #{{ $labels.subscriber }} scenario for {{ $labels.namespace }}/{{ $labels.pod }}"
      summary: "End to end latency exceeds 12s"
    enabled: true
    expr: sum(rate(hedera_mirror_monitor_subscribe_e2e_seconds_sum{application="hedera-mirror-monitor"}[2m])) by (namespace, pod, scenario, subscriber) / sum(rate(hedera_mirror_monitor_subscribe_e2e_seconds_count{application="hedera-mirror-monitor"}[2m])) by (namespace, pod, scenario, subscriber) > 12
    for: 2m
    labels:
      severity: critical
      application: hedera-mirror-monitor

  MonitorSubscribeStopped:
    annotations:
      description: "TPS dropped to {{ $value }} for '{{ $labels.scenario }}' #{{ $labels.subscriber }} scenario for {{ $labels.namespace }}/{{ $labels.pod }}"
      summary: "Subscription stopped"
    enabled: true
    expr: sum(rate(hedera_mirror_monitor_subscribe_e2e_seconds_sum{application="hedera-mirror-monitor"}[2m])) by (namespace, pod, subscriber, scenario) / sum(rate(hedera_mirror_monitor_subscribe_e2e_seconds_count{application="hedera-mirror-monitor"}[2m])) by (namespace, pod, subscriber, scenario) <= 0
    for: 2m
    labels:
      severity: critical
      application: hedera-mirror-monitor

rbac:
  enabled: true

readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: http
  initialDelaySeconds: 100
  timeoutSeconds: 2

replicas: 1

resources:
  limits:
    cpu: 300m
    memory: 768Mi
  requests:
    cpu: 100m
    memory: 256Mi

revisionHistoryLimit: 3

securityContext:
  capabilities:
    drop: [ALL]
  readOnlyRootFilesystem: true
  runAsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

service:
  annotations: {}
  port: 80
  type: ClusterIP

serviceAccount:
  create: true
  # The name of the service account to use. If not set and create is true, a name is generated using the fullname template
  name:

serviceMonitor:
  enabled: false
  interval: 30s

terminationGracePeriodSeconds: 60

tolerations: []

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 10%
    maxUnavailable: 25%

# Volumes to add to the container. The key is the volume name and the value is the volume mount definition. The same keys should also appear in volumes below.
volumeMounts:
  config:
    mountPath: /usr/etc/hedera

# Volume mounts to add to the container. The key is the volume name and the value is the volume definition. Evaluated as a template.
volumes:
  config:
    secret:
      defaultMode: 420
      secretName: '{{ include "hedera-mirror-monitor.fullname" . }}'
