fullnameOverride: mirror

global:
  namespaceOverride: ""

grpc:
  config:
    hedera:
      mirror:
        grpc:
          db:
            host: postgresql
            password: mirror_node_pass
            username: mirror_node
  enabled: true

importer:
  config:
    hedera:
      mirror:
        db:
          host: postgresql
          name: mirror_node
          password: mirror_node_pass
          username: mirror_node
  enabled: true

labels: {}

networkPolicy:
  enabled: true

postgresql:
  enabled: true
  fullnameOverride: postgresql
  initdbScriptsSecret: mirror-postgresql-init
  master:
    labels:
      role: db
  metrics:
    enabled: true
    securityContext:
      enabled: true
  networkPolicy:
    allowExternal: false
    enabled: true
  postgresqlDatabase: mirror_node
  postgresqlPassword: password
  replication:
    applicationName: mirror_node
    enabled: false
    numSynchronousReplicas: 1
    password: foobar
    slaveReplicas: 1
    synchronousCommit: "on"
  serviceAccount:
    enabled: true
  serviceMonitor:
    enabled: true
  slave:
    labels:
      role: db

prometheus-adapter:
  fullnameOverride: prometheus-adapter
  logLevel: 8
  prometheus:
    url: http://mirror-prometheus-operator-prometheus
  resources:
    limits:
      cpu: 75m
      memory: 128Mi
    requests:
      cpu: 25m
      memory: 64Mi
  rules:
    default: false
    resource:
      cpu:
        containerQuery: sum(irate(container_cpu_usage_seconds_total{<<.LabelMatchers>>,container!="POD",container!="",pod!=""}[3m])) by (<<.GroupBy>>)
        nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, id='/'}[3m])) by (<<.GroupBy>>)
        resources:
          overrides:
            node:
              resource: node
            namespace:
              resource: namespace
            pod:
              resource: pod
        containerLabel: container
      memory:
        containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,container!="POD",container!="",pod!=""}) by (<<.GroupBy>>)
        nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,id='/'}) by (<<.GroupBy>>)
        resources:
          overrides:
            node:
              resource: node
            namespace:
              resource: namespace
            pod:
              resource: pod
        containerLabel: container
      window: 3m

prometheus-operator:
  alertmanager:
    service:
      type: LoadBalancer
  grafana:
    adminPassword: password
    defaultDashboardsEnabled: true
    service:
      type: LoadBalancer
  prometheus:
    prometheusSpec:
      retention: 90d
      serviceMonitorSelectorNilUsesHelmValues: false
    service:
      type: LoadBalancer

rest:
  enabled: true
  config:
    hedera:
      mirror:
        db:
          host: postgresql
