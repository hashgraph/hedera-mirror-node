fullnameOverride: mirror

global:
  namespaceOverride: ""

grpc:
  config:
    hedera:
      mirror:
        grpc:
          db:
            host: postgresql-pgpool
            password: mirror_grpc_pass
            username: mirror_grpc
  enabled: true
  priorityClassName: medium

importer:
  config:
    hedera:
      mirror:
        db:
          host: postgresql-pgpool
          name: mirror_node
          password: mirror_node_pass
          username: mirror_node
  enabled: true
  priorityClassName: high

labels: {}

loki-stack:
  enabled: true
  loki:
    config:
      table_manager:
        retention_deletes_enabled: true
        retention_period: 2184h
    fullnameOverride: loki
    networkPolicy:
      enabled: true
    persistence:
      enabled: true
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 64Mi
    serviceMonitor:
      enabled: true
  promtail:
    fullnameOverride: promtail
    loki:
      serviceName: loki
    resources:
      limits:
        cpu: 125m
        memory: 100Mi
      requests:
        cpu: 50m
        memory: 32Mi
    serviceMonitor:
      enabled: true

networkPolicy:
  enabled: false

postgresql:
  enabled: true
  metrics:
    enabled: true
    resources:
      limits:
        cpu: 50m
        memory: 50Mi
      requests:
        cpu: 20m
        memory: 25Mi
    serviceMonitor:
      enabled: true
  fullnameOverride: postgresql
  networkPolicy:
    allowExternal: false
    enabled: true
  persistence:
    size: 750Gi
  pgpool:
    adminPassword: password
    initdbScripts:
      init.sh: |-
        #!/bin/bash
        pg_md5 -m --config-file="/opt/bitnami/pgpool/conf/pgpool.conf" -u "mirror_node" "mirror_node_pass"
        pg_md5 -m --config-file="/opt/bitnami/pgpool/conf/pgpool.conf" -u "mirror_grpc" "mirror_grpc_pass"
        pg_md5 -m --config-file="/opt/bitnami/pgpool/conf/pgpool.conf" -u "mirror_api" "mirror_api_pass"
    pdb:
      create: true
    priorityClassName: critical
    replicaCount: 2
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
  postgresql:
    initdbScriptsCM: postgresql-init
    password: password
    priorityClassName: critical
    repmgrPassword: password
    resources:
      limits:
        cpu: 1500m
        memory: 1000Mi
      requests:
        cpu: 250m
        memory: 500Mi

prometheus-adapter:
  enabled: true
  fullnameOverride: prometheus-adapter
  priorityClassName: low
  prometheus:
    url: http://prometheus-prometheus
  resources:
    limits:
      cpu: 50m
      memory: 100Mi
    requests:
      cpu: 25m
      memory: 50Mi
  rules:
    default: false
    resource:
      cpu:
        containerQuery: sum(irate(container_cpu_usage_seconds_total{<<.LabelMatchers>>,container!="POD",container!="",pod!=""}[3m])) by (<<.GroupBy>>)
        nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, id='/'}[3m])) by (<<.GroupBy>>)
        resources:
          overrides:
            node:
              resource: node
            namespace:
              resource: namespace
            pod:
              resource: pod
        containerLabel: container
      memory:
        containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,container!="POD",container!="",pod!=""}) by (<<.GroupBy>>)
        nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,id='/'}) by (<<.GroupBy>>)
        resources:
          overrides:
            node:
              resource: node
            namespace:
              resource: namespace
            pod:
              resource: pod
        containerLabel: container
      window: 3m

prometheus-operator:
  alertmanager:
    alertmanagerSpec:
      priorityClassName: low
      resources:
        limits:
          cpu: 50m
          memory: 80Mi
        requests:
          cpu: 30m
          memory: 30Mi
    enabled: false
  enabled: true
  fullnameOverride: prometheus
  grafana:
    additionalDataSources:
      - name: Loki
        type: loki
        access: proxy
        url: http://loki:3100
        jsonData:
          maxLines: 500
    adminPassword: password
    defaultDashboardsEnabled: true
    fullnameOverride: grafana
    resources:
      limits:
        cpu: 100m
        memory: 100Mi
      requests:
        cpu: 50m
        memory: 30Mi
    service:
      type: LoadBalancer
  kube-state-metrics:
    fullnameOverride: prometheus-kube-state-metrics
    resources:
      limits:
        cpu: 10m
        memory: 64Mi
      requests:
        cpu: 5m
        memory: 16Mi
  prometheus-node-exporter:
    fullnameOverride: prometheus-node-exporter
    hostNetwork: false
    resources:
      limits:
        cpu: 20m
        memory: 30Mi
      requests:
        cpu: 10m
        memory: 10Mi
  prometheus:
    prometheusSpec:
      priorityClassName: low
      resources:
        limits:
          cpu: 400m
          memory: 500Mi
        requests:
          cpu: 200m
          memory: 200Mi
      retention: 90d
      serviceMonitorSelectorNilUsesHelmValues: false
      storageSpec:
        volumeClaimTemplate:
          spec:
            resources:
              requests:
                storage: 50Gi
  prometheusOperator:
    resources:
      limits:
        cpu: 100m
        memory: 100Mi
      requests:
        cpu: 50m
        memory: 50Mi

rest:
  enabled: true
  config:
    hedera:
      mirror:
        db:
          host: postgresql-pgpool
  priorityClassName: medium
