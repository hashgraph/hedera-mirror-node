alertmanager:
  inhibitRules:
    enabled: false
    InhibitAllWhenPlatformNotActive:
      enabled: true
      matches:
        - sourceMatch:
            - name: alertname
              value: MonitorPublishPlatformNotActive
          targetMatch:
            - name: application
              regex: true
              value: .*
          equal:
            - namespace
    InhibitGrpcAndMonitorHighLatencyWhenImporterRecordFileIssues:
      enabled: true
      matches:
        - sourceMatch:
            - name: application
              value: hedera-mirror-importer
            - name: type
              value: RECORD
          targetMatch:
            - name: alertname
              regex: true
              value: (GrpcHighLatency|MonitorSubscribeLatency)
          equal:
            - namespace

    InhibitGrpcAndMonitorHighLatencyWhenImporterHighLatencyOrNoPods:
      enabled: true
      matches:
        - sourceMatch:
            - name: alertname
              value: ImporterNoPodsReady
          targetMatch:
            - name: alertname
              regex: true
              value: (GrpcHighLatency|MonitorSubscribeLatency)
          equal:
            - namespace

    InhibitMonitorNoTransactionsWhenImporterNoTransactionsOrNoPods:
      enabled: true
      matches:
        - sourceMatch:
            - name: alertname
              regex: true
              value: (ImporterNoTransactions|ImporterNoPodsReady)
          targetMatch:
            - name: alertname
              value: MonitorSubscribeStopped
          equal:
            - namespace

applicationResource:
  enabled: false
  partnerId: ""
  partnerName: ""
  solutionId: ""

db:
  host: "{{ .Release.Name }}"
  name: mirror_node
  schema: public
  owner:
    password: ""  # Randomly generated if left blank
    username: mirror_node

global:
  hostname: ""
  image: {}
  namespaceOverride: ""
  podAnnotations: {}
  useReleaseForNameLabel: false  # Set the name label to the release name for Marketplace

grpc:
  db:
    password: ""  # Randomly generated if left blank
    username: mirror_grpc
  enabled: true
  env:
    HEDERA_MIRROR_GRPC_DB_HOST:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_HOST
    HEDERA_MIRROR_GRPC_DB_NAME:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_NAME
    HEDERA_MIRROR_GRPC_DB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_GRPC_DB_PASSWORD
    HEDERA_MIRROR_GRPC_DB_USERNAME:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_GRPC_DB_USERNAME
    SPRING_REDIS_HOST:
      valueFrom:
        secretKeyRef:
          name: mirror-redis
          key: SPRING_REDIS_HOST
    SPRING_REDIS_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: mirror-redis
          key: SPRING_REDIS_PASSWORD

importer:
  db:
    password: ""  # Randomly generated if left blank
    username: mirror_importer
  enabled: true
  envFrom:
    - secretRef:
        name: mirror-passwords
    - secretRef:
        name: mirror-redis

labels: {}

monitor:
  enabled: true
  env:
    HEDERA_MIRROR_MONITOR_MIRROR_NODE_GRPC_HOST: "{{ .Release.Name }}-grpc"
    HEDERA_MIRROR_MONITOR_MIRROR_NODE_REST_HOST: "{{ .Release.Name }}-rest"
    HEDERA_MIRROR_MONITOR_MIRROR_NODE_REST_PORT: "80"

networkPolicy:
  enabled: false

postgresql:
  enabled: true
  metrics:
    enabled: false
    resources:
      limits:
        cpu: 50m
        memory: 50Mi
      requests:
        cpu: 20m
        memory: 25Mi
  nameOverride: postgres
  persistence:
    size: 500Gi
  pgpool:
    adminPassword: ""  # Randomly generated if left blank
    existingSecret: mirror-passwords
    extraEnvVars:
      - name: PGPOOL_POSTGRES_CUSTOM_PASSWORDS
        valueFrom:
          secretKeyRef:
            name: mirror-passwords
            key: PGPOOL_POSTGRES_CUSTOM_PASSWORDS
      - name: PGPOOL_POSTGRES_CUSTOM_USERS
        valueFrom:
          secretKeyRef:
            name: mirror-passwords
            key: PGPOOL_POSTGRES_CUSTOM_USERS
    image:
      debug: true
    podAntiAffinityPreset: soft
    podLabels:
      role: db
    pdb:
      create: true
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
  postgresql:
    existingSecret: mirror-passwords
    extraEnvVarsSecret: mirror-passwords
    image:
      debug: true
    initdbScriptsSecret: "{{ .Release.Name }}-init"
    password: ""  # Randomly generated if left blank
    podAntiAffinityPreset: soft
    replicaCount: 1
    repmgrPassword: ""  # Randomly generated if left blank
    resources:
      limits:
        cpu: 1500m
        memory: 1000Mi
      requests:
        cpu: 250m
        memory: 500Mi
    repmgrLogLevel: DEBUG
  serviceAccount:
    create: true

redis:
  auth:
    existingSecret: mirror-redis
    existingSecretPasswordKey: SPRING_REDIS_PASSWORD
    password: ""  # Randomly generated if left blank
  enabled: true
  host: "{{ .Release.Name }}-redis"
  metrics:
    resources:
      limits:
        cpu: 100m
        memory: 50Mi
      requests:
        cpu: 50m
        memory: 25Mi
    serviceMonitor:
      enabled: true
  pdb:
    create: true
  rbac:
    create: true
  replica:
    podAntiAffinityPreset: soft
    podSecurityContext:
      runAsGroup: 1001
      runAsUser: 1001
    replicaCount: 1
    resources:
      limits:
        cpu: 1500m
        memory: 1000Mi
      requests:
        cpu: 250m
        memory: 500Mi
  sentinel:
    enabled: true
    masterSet: mirror
    persistence:
      enabled: true
    resources:
      limits:
        cpu: 100m
        memory: 50Mi
      requests:
        cpu: 50m
        memory: 25Mi
  serviceAccount:
    create: true

rest:
  db:
    password: ""  # Randomly generated if left blank
    username: mirror_rest
  enabled: true
  env:
    HEDERA_MIRROR_REST_DB_HOST:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_HOST
    HEDERA_MIRROR_REST_DB_NAME:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_NAME
    HEDERA_MIRROR_REST_DB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_RESTPASSWORD
    HEDERA_MIRROR_REST_DB_USERNAME:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_RESTUSERNAME

rosetta:
  db:
    password: ""  # Randomly generated if left blank
    username: mirror_rosetta
  enabled: true
  env:
    HEDERA_MIRROR_ROSETTA_DB_HOST:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_HOST
    HEDERA_MIRROR_ROSETTA_DB_NAME:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_NAME
    HEDERA_MIRROR_ROSETTA_DB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_ROSETTA_DB_PASSWORD
    HEDERA_MIRROR_ROSETTA_DB_USERNAME:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_ROSETTA_DB_USERNAME

test:
  config:
    hedera:
      mirror:
        test:
          acceptance:
            # grpc endpoint
            mirrorNodeAddress: "{{ .Release.Name }}-grpc:5600"
            # Do not use use 0.0.2 or 0.0.50 for operator to ensure crypto transfers are not waived
            operatorId:
            operatorKey:
            rest:
              baseUrl: "http://{{ .Release.Name }}-rest/api/v1"
  cucumberTags: "@acceptance"
  enabled: false
  git:
    branch: ""  # Default to Chart app version
    repository: https://github.com/hashgraph/hedera-mirror-node.git
  image:
    pullPolicy: IfNotPresent
    repository: alpine
    tag: latest

web3:
  db:
    password: ""  # Randomly generated if left blank
    username: mirror_web3
  enabled: true
  env:
    HEDERA_MIRROR_WEB3_DB_HOST:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_HOST
    HEDERA_MIRROR_WEB3_DB_NAME:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_NAME
    HEDERA_MIRROR_WEB3_DB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_WEB3_DB_PASSWORD
    HEDERA_MIRROR_WEB3_DB_USERNAME:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_WEB3_DB_USERNAME
