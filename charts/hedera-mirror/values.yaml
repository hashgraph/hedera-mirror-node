applicationResource:
  enabled: false
  partnerId: ""
  partnerName: ""
  solutionId: ""

global:
  namespaceOverride: ""
  useReleaseForNameLabel: false  # Set the name label to the release name for Marketplace

db:
  host: "{{ .Release.Name }}"
  name: mirror_node
  schema: mirrornode
  owner:
    password: ""  # Randomly generated if left blank
    username: mirror_node

grpc:
  db:
    password: ""  # Randomly generated if left blank
    username: mirror_grpc
  enabled: true
  env:
    HEDERA_MIRROR_GRPC_DB_HOST:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_HOST
    HEDERA_MIRROR_GRPC_DB_NAME:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_NAME
    HEDERA_MIRROR_GRPC_DB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_GRPC_DB_PASSWORD
    HEDERA_MIRROR_GRPC_DB_USERNAME:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_GRPC_DB_USERNAME
    SPRING_REDIS_HOST:
      valueFrom:
        secretKeyRef:
          name: mirror-redis
          key: SPRING_REDIS_HOST
    SPRING_REDIS_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: mirror-redis
          key: SPRING_REDIS_PASSWORD

importer:
  db:
    password: ""  # Randomly generated if left blank
    username: mirror_importer
  enabled: true
  envFrom:
    - secretRef:
        name: mirror-passwords
    - secretRef:
        name: mirror-redis

labels: {}

monitor:
  enabled: true
  env:
    HEDERA_MIRROR_MONITOR_MIRROR_NODE_GRPC_HOST: "{{ .Release.Name }}-grpc"
    HEDERA_MIRROR_MONITOR_MIRROR_NODE_REST_HOST: "{{ .Release.Name }}-rest"

networkPolicy:
  enabled: false

postgresql:
  enabled: true
  metrics:
    enabled: false
    resources:
      limits:
        cpu: 50m
        memory: 50Mi
      requests:
        cpu: 20m
        memory: 25Mi
  nameOverride: postgres
  networkPolicy:
    enabled: false
  persistence:
    size: 500Gi
  pgpool:
    adminPassword: ""  # Randomly generated if left blank
    extraEnvVars:
      - name: PGPOOL_POSTGRES_CUSTOM_PASSWORDS
        valueFrom:
          secretKeyRef:
            name: mirror-passwords
            key: PGPOOL_POSTGRES_CUSTOM_PASSWORDS
      - name: PGPOOL_POSTGRES_CUSTOM_USERS
        valueFrom:
          secretKeyRef:
            name: mirror-passwords
            key: PGPOOL_POSTGRES_CUSTOM_USERS
    podAntiAffinityPreset: soft
    podLabels:
      role: db
    pdb:
      create: true
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
  pgpoolImage:
    debug: true
  postgresqlImage:
    debug: true
    tag: 13.2.0-debian-10-r83
  postgresql:
    existingSecret: mirror-passwords
    extraEnvVarsSecret: mirror-passwords
    initdbScriptsSecret: db-init
    password: ""  # Randomly generated if left blank
    podAntiAffinityPreset: soft
    replicaCount: 1
    repmgrPassword: ""  # Randomly generated if left blank
    resources:
      limits:
        cpu: 1500m
        memory: 1000Mi
      requests:
        cpu: 250m
        memory: 500Mi
    repmgrLogLevel: DEBUG
  serviceAccount:
    enabled: true

redis:
  auth:
    existingSecret: mirror-redis
    existingSecretPasswordKey: SPRING_REDIS_PASSWORD
    password: ""  # Randomly generated if left blank
  enabled: true
  host: "{{ .Release.Name }}-redis"
  metrics:
    resources:
      limits:
        cpu: 100m
        memory: 50Mi
      requests:
        cpu: 50m
        memory: 25Mi
    serviceMonitor:
      enabled: true
  pdb:
    create: true
  rbac:
    create: true
  replica:
    podAntiAffinityPreset: soft
    podSecurityContext:
      runAsGroup: 1001
      runAsUser: 1001
    replicaCount: 1
    resources:
      limits:
        cpu: 1500m
        memory: 1000Mi
      requests:
        cpu: 250m
        memory: 500Mi
  sentinel:
    enabled: true
    masterSet: mirror
    resources:
      limits:
        cpu: 100m
        memory: 50Mi
      requests:
        cpu: 50m
        memory: 25Mi
  serviceAccount:
    create: true

rest:
  db:
    password: ""  # Randomly generated if left blank
    username: mirror_rest
  enabled: true
  env:
    HEDERA_MIRROR_REST_DB_HOST:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_HOST
    HEDERA_MIRROR_REST_DB_NAME:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_NAME
    HEDERA_MIRROR_REST_DB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_RESTPASSWORD
    HEDERA_MIRROR_REST_DB_USERNAME:
      valueFrom:
        secretKeyRef:
          name: mirror-passwords
          key: HEDERA_MIRROR_IMPORTER_DB_RESTUSERNAME

timescaledb:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    tag: pg13-ts2.2-latest
  loadBalancer:
    enabled: false
  patroni:
    bootstrap:
      dcs:
        postgresql:
          parameters:
            max_worker_processes: 26  # Must be > max_background_workers + max_parallel_workers (default 4)
            password_encryption: scram-sha-256
            ssl: 'off'  # disable all ssl connections to not require Patroni certificate
            temp_file_limit: 20GB
            timescaledb.max_background_workers: 20
            work_mem: 50MB
    postgresql:
      pg_hba:
      - local     all             postgres                            peer           # allow local connections
      - local     all             all                                 scram-sha-256
      - hostnossl all,replication all               all               scram-sha-256  # allow TCP/IP connections (no ssl)
  persistentVolumes:
    data:
      size: 500Gi
    wal:
      size: 10Gi
  podManagementPolicy: Parallel
  podMonitor:
    enabled: false
    interval: 30s
  postInit:
    - secret:
        name: db-init
  prometheus:
    image:
      pullPolicy: IfNotPresent
      repository: quay.io/prometheuscommunity/postgres-exporter
      tag: v0.9.0
  replicaCount: 1
  resources:
    limits:
      cpu: 4
      memory: 16Gi
    requests:
      cpu: 1
      memory: 1Gi
  secretNames:
    credentials: mirror-passwords
  sharedMemory:
    useMount: true
  timescaledbTune:
    args:
      # use the same values in resources limits
      cpus: 4
      memory: 16GB
