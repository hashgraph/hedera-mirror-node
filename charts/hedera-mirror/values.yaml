applicationResource:
  enabled: false
  partnerId: ""
  partnerName: ""
  solutionId: ""

global:
  db:
    host: RELEASE-NAME-postgres-pgpool  # RELEASE-NAME will be replaced with actual release by children charts. Set to RELEASE-NAME-timescaledb for timescaledb
  namespaceOverride: ""
  redis:
    host: RELEASE-NAME-redis  # RELEASE-NAME will be replaced with actual release by children charts
    password: redis_password
  rest:
    username: mirror_api
    password: mirror_api_pass
  useReleaseForNameLabel: false  # Set the name label to the release name for Marketplace

grpc:
  config:
    hedera:
      mirror:
        grpc:
          db:
            password: mirror_grpc_pass
            username: mirror_grpc
  enabled: true

importer:
  config:
    hedera:
      mirror:
        importer:
          db:
            name: mirror_node
            password: mirror_node_pass
            username: mirror_node
  enabled: true
  extraVolumes: []
  # - name: addressbook-secret-volume
  #   secret:
  #     defaultMode: 420
  #     secretName: mirror-importer-addressbook
  extraVolumeMounts: []
  # - name: addressbook-secret-volume
  #   mountPath: /usr/etc/addressbook/perf.bin
  redis:
    sentinel:
      masterSet: mirror

labels: {}

monitor:
  enabled: true

networkPolicy:
  enabled: false

postgresql:
  enabled: true
  metrics:
    enabled: false
    resources:
      limits:
        cpu: 50m
        memory: 50Mi
      requests:
        cpu: 20m
        memory: 25Mi
  nameOverride: postgres
  networkPolicy:
    enabled: false
  persistence:
    size: 500Gi
  pgpool:
    adminPassword: password
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: pgpool
    customUsersSecret: '{{ printf "%s-pgpool-init" .Release.Name }}'
    podLabels:
      role: db
    pdb:
      create: true
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
  pgpoolImage:
    debug: true
  postgresqlImage:
    debug: true
    tag: 13.1.0-debian-10-r74
  postgresql:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: postgresql
    initdbScriptsSecret: '{{ printf "%s-postgresql-init" .Release.Name }}'
    password: password
    replicaCount: 1
    repmgrPassword: password
    resources:
      limits:
        cpu: 1500m
        memory: 1000Mi
      requests:
        cpu: 250m
        memory: 500Mi
    repmgrLogLevel: DEBUG

redis:
  cluster:
    slaveCount: 1
  enabled: true
  metrics:
    resources:
      limits:
        cpu: 100m
        memory: 50Mi
      requests:
        cpu: 50m
        memory: 25Mi
    serviceMonitor:
      enabled: true
  podDisruptionBudget:
    enabled: true
  securityContext:
    runAsGroup: 1001
    runAsUser: 1001
  sentinel:
    enabled: true
    masterSet: mirror
    resources:
      limits:
        cpu: 100m
        memory: 50Mi
      requests:
        cpu: 50m
        memory: 25Mi
  serviceAccount:
    create: true
  slave:  # Both master and slave are configured via slave property when sentinel is enabled
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: redis
    resources:
      limits:
        cpu: 1500m
        memory: 1000Mi
      requests:
        cpu: 250m
        memory: 500Mi
    statefulset:
      updateStrategy: RollingUpdate
  usePasswordFile: true

rest:
  enabled: true

timescaledb:
  enabled: false
  image:
    repository: timescaledev/timescaledb-ha
    tag: pg12.5-ts2.0.0-p0
  patroni:
    bootstrap:
      dcs:
        postgresql:
          parameters:
            ssl: 'off'  # disable all ssl connections to not require Patroni certificate
    postgresql:
      pg_hba:
      - local     all             postgres                              peer  # allow local connections
      - local     all             all                                   md5
      - hostnossl all,replication all                all                md5   # allow TCP/IP connections (no ssl)
  persistentVolume:
    size: 500Gi
  postInit:
    - secret:
        name: timescaledb-init-job
  postgresql:
    databases:
      - postgres
    parameters:
      max_wal_size: 8GB  # recommended to be 80% of the Volume Size
      min_wal_size: 2GB  # 80% of the WAL Volume Size
      shared_buffers: 1GB  # recommended to be 25% of available instance memory
      work_mem: 50MB
  resources:
    limits:
      cpu: 2
      memory: 4Gi
    requests:
      cpu: 250m
      memory: 500Mi
