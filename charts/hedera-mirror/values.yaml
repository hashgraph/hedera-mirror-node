alertmanager:
  inhibitRules:
    enabled: false
    InhibitAllWhenPlatformNotActive:
      enabled: true
      matches:
        - sourceMatch:
            - name: alertname
              value: MonitorPublishPlatformNotActive
          targetMatch:
            - name: application
              regex: true
              value: .*
          equal:
            - namespace
    InhibitGrpcAndMonitorHighLatencyWhenImporterRecordFileIssues:
      enabled: true
      matches:
        - sourceMatch:
            - name: application
              value: hedera-mirror-importer
            - name: type
              value: RECORD
          targetMatch:
            - name: alertname
              regex: true
              value: (GrpcHighLatency|MonitorSubscribeLatency)
          equal:
            - namespace

    InhibitGrpcAndMonitorHighLatencyWhenImporterHighLatencyOrNoPods:
      enabled: true
      matches:
        - sourceMatch:
            - name: alertname
              value: ImporterNoPodsReady
          targetMatch:
            - name: alertname
              regex: true
              value: (GrpcHighLatency|MonitorSubscribeLatency)
          equal:
            - namespace

    InhibitMonitorNoTransactionsWhenImporterNoTransactionsOrNoPods:
      enabled: true
      matches:
        - sourceMatch:
            - name: alertname
              regex: true
              value: (ImporterNoTransactions|ImporterNoPodsReady)
          targetMatch:
            - name: alertname
              value: MonitorSubscribeStopped
          equal:
            - namespace

applicationResource:
  enabled: false
  partnerId: ""
  partnerName: ""
  solutionId: ""

db:
  host: ""  # Auto-generated from the database sub-charts
  name: mirror_node
  schema: public
  owner:
    password: ""  # Randomly generated if left blank
    username: mirror_node

fullnameOverride: ""

global:
  hostname: ""
  image: {}
  namespaceOverride: ""
  podAnnotations: {}
  useReleaseForNameLabel: false  # Set the name label to the release name for Marketplace

graphql:
  db:
    password: ""  # Randomly generated if left blank
    username: mirror_graphql
  enabled: true
  envFrom:
    - secretRef:
        name: mirror-passwords

grpc:
  db:
    password: ""  # Randomly generated if left blank
    username: mirror_grpc
  enabled: true
  envFrom:
    - secretRef:
        name: mirror-passwords
    - secretRef:
        name: "{{ .Release.Name }}-redis"

importer:
  db:
    password: ""  # Randomly generated if left blank
    username: mirror_importer
  enabled: true
  envFrom:
    - secretRef:
        name: mirror-passwords
    - secretRef:
        name: "{{ .Release.Name }}-redis"

labels: {}

monitor:
  enabled: true
  env:
    HEDERA_MIRROR_MONITOR_MIRROR_NODE_GRPC_HOST: "{{ .Release.Name }}-grpc"
    HEDERA_MIRROR_MONITOR_MIRROR_NODE_GRPC_PORT: "5600"
    HEDERA_MIRROR_MONITOR_MIRROR_NODE_REST_HOST: "{{ .Release.Name }}-rest"
    HEDERA_MIRROR_MONITOR_MIRROR_NODE_REST_PORT: "80"

nameOverride: mirror

networkPolicy:
  enabled: false

postgresql:
  enabled: true
  metrics:
    enabled: false
    resources:
      limits:
        cpu: 50m
        memory: 50Mi
      requests:
        cpu: 20m
        memory: 25Mi
  nameOverride: postgres
  persistence:
    size: 500Gi
  pgpool:
    adminPassword: ""  # Randomly generated if left blank
    childLifeTime: 60
    childMaxConnections: 2
    existingSecret: mirror-passwords
    extraEnvVars:
      - name: PGPOOL_POSTGRES_CUSTOM_PASSWORDS
        valueFrom:
          secretKeyRef:
            name: mirror-passwords
            key: PGPOOL_POSTGRES_CUSTOM_PASSWORDS
      - name: PGPOOL_POSTGRES_CUSTOM_USERS
        valueFrom:
          secretKeyRef:
            name: mirror-passwords
            key: PGPOOL_POSTGRES_CUSTOM_USERS
    image:
      debug: true
    numInitChildren: 100
    podAntiAffinityPreset: soft
    podLabels:
      role: db
    pdb:
      create: true
    reservedConnections: 0
    resources:
      limits:
        cpu: 600m
        memory: 750Mi
      requests:
        cpu: 200m
        memory: 256Mi
  postgresql:
    existingSecret: mirror-passwords
    extraEnvVarsSecret: mirror-passwords
    image:
      debug: true
      tag: 14.7.0-debian-11-r27
    initdbScriptsCM: "{{ .Release.Name }}-init"
    maxConnections: 200
    password: ""  # Randomly generated if left blank
    podAntiAffinityPreset: soft
    replicaCount: 1
    repmgrPassword: ""  # Randomly generated if left blank
    resources:
      limits:
        cpu: 1500m
        memory: 1000Mi
      requests:
        cpu: 250m
        memory: 500Mi
    repmgrLogLevel: DEBUG
  serviceAccount:
    create: true

redis:
  auth:
    existingSecret: "{{ .Release.Name }}-redis"
    existingSecretPasswordKey: SPRING_DATA_REDIS_PASSWORD
    password: ""  # Randomly generated if left blank
  enabled: true
  host: "{{ .Release.Name }}-redis"
  metrics:
    resources:
      limits:
        cpu: 100m
        memory: 50Mi
      requests:
        cpu: 50m
        memory: 25Mi
    serviceMonitor:
      enabled: true
  pdb:
    create: true
  rbac:
    create: true
  replica:
    podAntiAffinityPreset: soft
    podSecurityContext:
      runAsGroup: 1001
      runAsUser: 1001
    replicaCount: 1
    resources:
      limits:
        cpu: 1500m
        memory: 1000Mi
      requests:
        cpu: 250m
        memory: 500Mi
  sentinel:
    enabled: true
    masterSet: mirror
    persistence:
      enabled: true
    readinessProbe:
      timeoutSeconds: 4
    resources:
      limits:
        cpu: 150m
        memory: 256Mi
      requests:
        cpu: 75m
        memory: 75Mi
  serviceAccount:
    create: true

rest:
  db:
    password: ""  # Randomly generated if left blank
    username: mirror_rest
  enabled: true
  envFrom:
    - secretRef:
        name: mirror-passwords

rosetta:
  db:
    password: ""  # Randomly generated if left blank
    username: mirror_rosetta
  enabled: true
  envFrom:
    - secretRef:
        name: mirror-passwords

stackgres:
  coordinator:
    config:
      checkpoint_timeout: "1800"
      citus.executor_slow_start_interval: "100ms"
      citus.max_cached_conns_per_worker: "4"
      citus.max_shared_pool_size: "380"
      cron.database_name: "{{ .Values.db.name }}"
      log_checkpoints: "true"
      log_timezone: "Etc/UTC"
      max_connections: "300"
      max_replication_slots: "5"
      max_wal_senders: "5"
      max_wal_size: "24GB"
      password_encryption: "scram-sha-256"
      random_page_cost: "1.1"
      shared_buffers: "12GB"
      shared_preload_libraries: pg_cron,pg_partman_bgw
      work_mem: "32MB"
    instances: 1
    resources:
      cpu: 100m
      memory: 1Gi
    persistentVolume:
      size: 5Gi
  enabled: false
  extensions:
    - name: btree_gist
      version: stable
    - name: pg_cron
      version: stable
    - name: pg_partman
      version: "4.7.3"
  nameOverride: citus
  pgbouncer:
    default_pool_size: "1000"
    ignore_startup_parameters: extra_float_digits,options,statement_timeout
    max_client_conn: "1000"
    max_db_connections: "0"
    max_user_connections: "0"
    pool_mode: session
  podAntiAffinity: true
  postgresVersion: 14
  prometheus: false
  worker:
    config:
      checkpoint_timeout: "1800"
      cron.database_name: "{{ .Values.db.name }}"
      log_checkpoints: "true"
      log_timezone: "Etc/UTC"
      max_connections: "400"
      max_replication_slots: "5"
      max_wal_senders: "5"
      max_wal_size: "24GB"
      password_encryption: "scram-sha-256"
      random_page_cost: "1.1"
      shared_buffers: "12GB"
      shared_preload_libraries: pg_cron,pg_partman_bgw
      work_mem: "32MB"
    instances: 1
    replicasPerInstance: 1
    resources:
      cpu: 100m
      memory: 1Gi
    persistentVolume:
      size: 5Gi

test:
  annotations:
    helm.sh/hook: test-success
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "10"
  config:
    hedera:
      mirror:
        test:
          acceptance:
            mirrorNodeAddress: "{{ .Release.Name }}-grpc:5600"
            rest:
              baseUrl: "http://{{ .Release.Name }}-rest"
            web3:
              baseUrl: "http://{{ .Release.Name }}-web3"
  cucumberTags: "@acceptance"
  enabled: false
  env: {}
  args:
    - -Dcucumber.ansi-colors.disabled=true
    - -Dcucumber.filter.tags={{ .Values.test.cucumberTags }}
  image:
    pullPolicy: IfNotPresent
    registry: gcr.io
    repository: mirrornode/hedera-mirror-test
    tag: ""  # Defaults to the chart's app version
  resources:
    limits:
      cpu: 3
      memory: 4096Mi
    requests:
      cpu: 1
      memory: 2048Mi

web3:
  db:
    password: ""  # Randomly generated if left blank
    username: mirror_web3
  enabled: true
  envFrom:
    - secretRef:
        name: mirror-passwords
