applicationResource:
  enabled: false
  partnerId: ""
  partnerName: ""
  projectId: ""

fullnameOverride: mirror

global:
  namespaceOverride: ""
  rbac:
    pspEnabled: false

grpc:
  config:
    hedera:
      mirror:
        grpc:
          db:
            host: postgresql-pgpool
            password: mirror_grpc_pass
            username: mirror_grpc
  enabled: true
  ingress:
    middleware:
      enabled: true
  priorityClassName: medium
  serviceMonitor:
    enabled: true

importer:
  config:
    hedera:
      mirror:
        importer:
          db:
            host: postgresql-pgpool
            name: mirror_node
            password: mirror_node_pass
            username: mirror_node
  enabled: true
  podMonitor:
    enabled: true
  priorityClassName: high

labels: {}

loki:
  enabled: true
  loki:
    config:
      table_manager:
        retention_deletes_enabled: true
        retention_period: 2184h
    fullnameOverride: loki
    networkPolicy:
      enabled: true
    persistence:
      enabled: true
    rbac:
      pspEnabled: false
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 64Mi
    serviceMonitor:
      enabled: true
  promtail:
    fullnameOverride: promtail
    loki:
      serviceName: loki
    rbac:
      pspEnabled: false
    resources:
      limits:
        cpu: 125m
        memory: 100Mi
      requests:
        cpu: 50m
        memory: 32Mi
    serviceMonitor:
      enabled: true

networkPolicy:
  enabled: false

postgresql:
  enabled: true
  metrics:
    enabled: true
    resources:
      limits:
        cpu: 50m
        memory: 50Mi
      requests:
        cpu: 20m
        memory: 25Mi
    serviceMonitor:
      enabled: true
  fullnameOverride: postgresql
  networkPolicy:
    enabled: false
  persistence:
    size: 750Gi
  pgpool:
    adminPassword: password
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: pgpool
    initdbScriptsSecret: pgpool-init
    podLabels:
      role: db
    pdb:
      create: true
    priorityClassName: critical
    replicaCount: 2
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
  pgpoolImage:
    debug: true
  postgresqlImage:
    debug: true
  postgresql:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: postgresql
    initdbScriptsSecret: postgresql-init
    podLabels:
      role: db
    password: password
    priorityClassName: critical
    repmgrPassword: password
    resources:
      limits:
        cpu: 1500m
        memory: 1000Mi
      requests:
        cpu: 250m
        memory: 500Mi
    repmgrLogLevel: DEBUG

priorityClass:
  enabled: true

prometheus-adapter:
  enabled: true
  fullnameOverride: prometheus-adapter
  priorityClassName: low
  prometheus:
    url: http://prometheus-prometheus
  resources:
    limits:
      cpu: 50m
      memory: 100Mi
    requests:
      cpu: 25m
      memory: 50Mi
  rules:
    default: false
    resource:
      cpu:
        containerQuery: sum(irate(container_cpu_usage_seconds_total{<<.LabelMatchers>>,container!="POD",container!="",pod!=""}[3m])) by (<<.GroupBy>>)
        nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, id='/'}[3m])) by (<<.GroupBy>>)
        resources:
          overrides:
            node:
              resource: node
            namespace:
              resource: namespace
            pod:
              resource: pod
        containerLabel: container
      memory:
        containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,container!="POD",container!="",pod!=""}) by (<<.GroupBy>>)
        nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,id='/'}) by (<<.GroupBy>>)
        resources:
          overrides:
            node:
              resource: node
            namespace:
              resource: namespace
            pod:
              resource: pod
        containerLabel: container
      window: 3m

prometheus:
  alertmanager:
    alertmanagerSpec:
      priorityClassName: low
      resources:
        limits:
          cpu: 50m
          memory: 80Mi
        requests:
          cpu: 30m
          memory: 30Mi
    enabled: false
  enabled: true
  fullnameOverride: prometheus
  grafana:
    additionalDataSources:
      - name: Loki
        type: loki
        access: proxy
        url: http://loki:3100
        jsonData:
          maxLines: 500
    adminPassword: password
    defaultDashboardsEnabled: true
    fullnameOverride: grafana
    grafana.ini:
      server:
        root_url: "%(protocol)s://%(domain)s/grafana/"
    ingress:
      annotations:
        traefik.ingress.kubernetes.io/router.middlewares: '{{ include "hedera-mirror.namespace" . }}-grafana@kubernetescrd'
      enabled: true
      hosts: [""]
      middleware:
        circuitBreaker: NetworkErrorRatio() > 0.10 || ResponseCodeRatio(500, 600, 0, 600) > 0.25
        connectionsPerIP: 10
        enabled: true
        ipWhitelist:
          - 0.0.0.0/0
        rateLimit:
          average: 50
          burst: 100
      path: "/grafana"
    rbac:
      namespaced: true
      pspEnabled: false
    resources:
      limits:
        cpu: 150m
        memory: 100Mi
      requests:
        cpu: 75m
        memory: 30Mi
  kube-state-metrics:
    fullnameOverride: prometheus-kube-state-metrics
    podSecurityPolicy:
      enabled: false
    resources:
      limits:
        cpu: 10m
        memory: 64Mi
      requests:
        cpu: 5m
        memory: 16Mi
  prometheus-node-exporter:
    fullnameOverride: prometheus-node-exporter
    hostNetwork: false
    rbac:
      pspEnabled: false
    resources:
      limits:
        cpu: 50m
        memory: 30Mi
      requests:
        cpu: 20m
        memory: 10Mi
  prometheus:
    additionalPodMonitors:
      - name: traefik
        podMetricsEndpoints:
          - port: traefik
            path: /metrics
            interval: 15s
        selector:
          matchLabels:
            app.kubernetes.io/name: traefik
    prometheusSpec:
      podMonitorSelectorNilUsesHelmValues: false
      priorityClassName: low
      resources:
        limits:
          cpu: 400m
          memory: 500Mi
        requests:
          cpu: 200m
          memory: 200Mi
      retention: 90d
      serviceMonitorSelectorNilUsesHelmValues: false
      storageSpec:
        volumeClaimTemplate:
          spec:
            resources:
              requests:
                storage: 50Gi
  prometheusOperator:
    namespaces:
      additional: []
      releaseNamespace: true
    resources:
      limits:
        cpu: 100m
        memory: 100Mi
      requests:
        cpu: 50m
        memory: 50Mi

rest:
  enabled: true
  config:
    hedera:
      mirror:
        rest:
          db:
            host: postgresql-pgpool
            password: mirror_api_pass
            username: mirror_api
  ingress:
    middleware:
      enabled: true
  priorityClassName: medium
  serviceMonitor:
    enabled: true

traefik:
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            topologyKey: kubernetes.io/hostname
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: traefik
  deployment:
    replicas: 2
  enabled: true
  fullnameOverride: traefik
  globalArguments: []
  ports:
    grpc:
      port: 5600
      expose: true
  priorityClassName: critical
  resources:
    requests:
      cpu: 100m
      memory: 50Mi
    limits:
      cpu: 300m
      memory: 150Mi
  service:
    spec:
      externalTrafficPolicy: Local
  volumes:
    - name: traefik
      mountPath: /etc/traefik/
      type: configMap
