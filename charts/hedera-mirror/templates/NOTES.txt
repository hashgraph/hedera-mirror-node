Hedera Mirror Node {{ .Chart.AppVersion }} successfully installed.

{{- if and .Values.graphql.enabled .Values.graphql.service }}
To access the GraphQL API:
{{- if contains "LoadBalancer" .Values.graphql.service.type }}
  GRAPHQL_IP=$(kubectl get service/{{ .Release.Name }}-graphql -n {{ include "hedera-mirror.namespace" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
{{- else if contains "ClusterIP" .Values.graphql.service.type }}
  kubectl port-forward "service/{{ .Release.Name }}-graphql" -n {{ include "hedera-mirror.namespace" . }} {{ .Values.graphql.service.port }}:80 &
{{- end }}
  curl --location --request POST "http://${GRAPHQL_IP:-127.0.0.1}:{{.Values.graphql.service.port}}/graphql/alpha" \
       --header 'Content-Type: application/json' \
       --data-raw '{"query":"{  account(input: {entityId: {shard: 0, realm: 0, num: 98}}) {alias autoRenewPeriod createdTimestamp declineReward createdTimestamp}}"}'
{{- end }}

{{- if and .Values.grpc.enabled .Values.grpc.service }}
To access the gRPC API:
{{- if contains "LoadBalancer" .Values.grpc.service.type }}
  GRPC_IP="$(kubectl get "service/{{ .Release.Name }}-grpc" -n {{ include "hedera-mirror.namespace" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
{{- else if contains "ClusterIP" .Values.grpc.service.type }}
  kubectl port-forward "service/{{ .Release.Name }}-grpc" -n {{ include "hedera-mirror.namespace" . }} {{ .Values.grpc.service.port }}:5600 &
{{- end }}
  grpcurl -plaintext "${GRPC_IP:-127.0.0.1}:{{.Values.grpc.service.port}}" list
{{- end }}

{{- if and .Values.rest.enabled .Values.rest.service }}
To access the REST API:
{{- if contains "LoadBalancer" .Values.rest.service.type }}
  REST_IP="$(kubectl get "service/{{ .Release.Name }}-rest" -n {{ include "hedera-mirror.namespace" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
{{- else if contains "ClusterIP" .Values.rest.service.type }}
  kubectl port-forward "service/{{ .Release.Name }}-rest" -n {{ include "hedera-mirror.namespace" . }} {{ .Values.rest.service.port }}:80 &
{{- end }}
  curl -s "http://${REST_IP:-127.0.0.1}:{{.Values.rest.service.port}}/api/v1/transactions?limit=1"
{{- end }}

{{- if and .Values.rosetta.enabled .Values.rosetta.service }}
To access the Rosetta API:
{{- if contains "LoadBalancer" .Values.rosetta.service.type }}
  ROSETTA_IP="$(kubectl get "service/{{ .Release.Name }}-rosetta" -n {{ include "hedera-mirror.namespace" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
{{- else if contains "ClusterIP" .Values.rosetta.service.type }}
  kubectl port-forward "service/{{ .Release.Name }}-rosetta" -n {{ include "hedera-mirror.namespace" . }} {{ .Values.rosetta.service.port }}:80 &
{{- end }}
  curl -sL -d '{"metadata":{}}' "http://${ROSETTA_IP:-127.0.0.1}:{{.Values.rosetta.service.port}}/network/list"
{{- end }}

{{- if and .Values.web3.enabled .Values.web3.service }}
To access the Web3 API
{{- if contains "LoadBalancer" .Values.web3.service.type }}
  WEB3_IP="$(kubectl get "service/{{ .Release.Name }}-web3" -n {{ include "hedera-mirror.namespace" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
{{- else if contains "ClusterIP" .Values.web3.service.type }}
  kubectl port-forward "service/{{ .Release.Name }}-web3" -n {{ include "hedera-mirror.namespace" . }} {{ .Values.web3.service.port }}:80 &
{{- end }}
  curl -sL -H "Content-Type: application/json" -X POST -d '{"from": "0x0000000000000000000000000000000002edec80","to": "0x0000000000000000000000000000000002edec81","value": 500,"gas": 0,"gasPrice": 0}' "http://${WEB3_IP:-127.0.0.1}:{{.Values.web3.service.port}}/api/v1/contracts/call"
{{- end }}
