apiVersion: v1
kind: ConfigMap
metadata:
  labels: {{- include "hedera-mirror.labels" . | nindent 4 }}
  name: {{ .Release.Name }}-init
  namespace: {{ include "hedera-mirror.namespace" . }}
data:
  001-init.sh: |-
    #!/bin/bash
    set -e

    PGHBACONF="/opt/bitnami/postgresql/conf/pg_hba.conf"
    if [[ -f "${PGHBACONF}" ]]; then
      cp "${PGHBACONF}" "${PGHBACONF}.bak"
      echo "local all all trust" > "${PGHBACONF}"
      pg_ctl reload
    fi

    psql -d "user=postgres connect_timeout=3" \
      --set ON_ERROR_STOP=1 \
      --set "dbName=${HEDERA_MIRROR_IMPORTER_DB_NAME}" \
      --set "dbSchema=${HEDERA_MIRROR_IMPORTER_DB_SCHEMA}" \
      --set "graphQLPassword=${HEDERA_MIRROR_GRAPHQL_DB_PASSWORD}" \
      --set "graphQLUsername=${HEDERA_MIRROR_GRAPHQL_DB_USERNAME}" \
      --set "grpcPassword=${HEDERA_MIRROR_GRPC_DB_PASSWORD}" \
      --set "grpcUsername=${HEDERA_MIRROR_GRPC_DB_USERNAME}" \
      --set "importerPassword=${HEDERA_MIRROR_IMPORTER_DB_PASSWORD}" \
      --set "importerUsername=${HEDERA_MIRROR_IMPORTER_DB_USERNAME}" \
      --set "ownerUsername=${HEDERA_MIRROR_IMPORTER_DB_OWNER}" \
      --set "ownerPassword=${HEDERA_MIRROR_IMPORTER_DB_OWNERPASSWORD}" \
      --set "restPassword=${HEDERA_MIRROR_IMPORTER_DB_RESTPASSWORD}" \
      --set "restUsername=${HEDERA_MIRROR_IMPORTER_DB_RESTUSERNAME}" \
      --set "rosettaPassword=${HEDERA_MIRROR_ROSETTA_DB_PASSWORD}" \
      --set "rosettaUsername=${HEDERA_MIRROR_ROSETTA_DB_USERNAME}" \
      --set "web3Password=${HEDERA_MIRROR_WEB3_DB_PASSWORD}" \
      --set "web3Username=${HEDERA_MIRROR_WEB3_DB_USERNAME}" <<__SQL__

    -- Create database & owner
    create user :ownerUsername with login password :'ownerPassword';
    create database :dbName with owner :ownerUsername;

    -- Add extensions
    create extension if not exists pg_stat_statements;

    -- Create roles
    create role readonly;
    create role readwrite in role readonly;

    -- Create users
    create user :graphQLUsername with login password :'graphQLPassword' in role readonly;
    create user :grpcUsername with login password :'grpcPassword' in role readonly;
    create user :importerUsername with login password :'importerPassword' in role readwrite;
    create user :rosettaUsername with login password :'rosettaPassword' in role readonly;
    create user :web3Username with login password :'web3Password' in role readonly;
    alter user :ownerUsername with createrole;

    -- Create schema
    \connect :dbName :ownerUsername
    create schema if not exists :dbSchema authorization :ownerUsername;
    grant usage on schema :dbSchema to public;
    revoke create on schema :dbSchema from public;

    -- Grant readonly privileges
    grant connect on database :dbName to readonly;
    grant select on all tables in schema :dbSchema to readonly;
    grant select on all sequences in schema :dbSchema to readonly;
    grant usage on schema :dbSchema to readonly;
    alter default privileges in schema :dbSchema grant select on tables to readonly;
    alter default privileges in schema :dbSchema grant select on sequences to readonly;

    -- Grant readwrite privileges
    grant insert, update, delete on all tables in schema :dbSchema to readwrite;
    grant usage on all sequences in schema :dbSchema to readwrite;
    alter default privileges in schema :dbSchema grant insert, update, delete on tables to readwrite;
    alter default privileges in schema :dbSchema grant usage on sequences to readwrite;

    -- Alter search path
    \connect postgres postgres
    alter database :dbName set search_path = :dbSchema, public;
    __SQL__

    if [[ -f "${PGHBACONF}.bak" ]]; then
      mv "${PGHBACONF}.bak" "${PGHBACONF}"
      pg_ctl reload
    fi
  {{- if .Values.citus.enabled }}
  002-citus.sh: |-
    #!/bin/bash
    set -e

    function setup_coordinator() {
      name="{{ include "postgresql.primary.fullname" .Subcharts.citus }}"
      coordinator="${name}-0.${name}-hl"

      # Setup coordinator
      psql -v ON_ERROR_STOP=1 --username "${POSTGRES_USER}" --dbname "${POSTGRES_DB}" -p "${POSTGRESQL_PORT_NUMBER}" <<-EOSQL
        select citus_set_coordinator_host('${coordinator}', ${POSTGRESQL_PORT_NUMBER});
      -- Partition privileges
      \c ${HEDERA_MIRROR_IMPORTER_DB_NAME}
      create extension if not exists pg_cron;
      create schema if not exists partman authorization ${HEDERA_MIRROR_IMPORTER_DB_OWNER};
      create extension if not exists pg_partman schema partman;
      alter schema partman owner to ${HEDERA_MIRROR_IMPORTER_DB_OWNER};
      grant all on schema partman to ${HEDERA_MIRROR_IMPORTER_DB_OWNER};
      grant usage on schema cron to ${HEDERA_MIRROR_IMPORTER_DB_OWNER};
      grant all on all tables in schema partman to ${HEDERA_MIRROR_IMPORTER_DB_OWNER};
      grant execute on all functions in schema partman to ${HEDERA_MIRROR_IMPORTER_DB_OWNER};
      grant execute on all procedures in schema partman to ${HEDERA_MIRROR_IMPORTER_DB_OWNER};
      grant all on schema ${HEDERA_MIRROR_IMPORTER_DB_SCHEMA} to ${HEDERA_MIRROR_IMPORTER_DB_OWNER};
      grant temporary on database ${HEDERA_MIRROR_IMPORTER_DB_NAME} to ${HEDERA_MIRROR_IMPORTER_DB_OWNER};
    EOSQL

      # Add workers
      id=0
      replicas={{.Values.citus.readReplicas.replicaCount}}
      name="{{ include "postgresql.readReplica.fullname" .Subcharts.citus }}"
      echo "Adding ${replicas} workers"

      while [[ ${id} -lt ${replicas} ]]; do
        host="${name}-${id}.${name}-hl"

        until ( exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h "${host}" -p "${POSTGRESQL_PORT_NUMBER}" ); do
          echo "Waiting for worker ${id} to become ready"
          sleep 1
        done

        psql -v ON_ERROR_STOP=1 --username "${POSTGRES_USER}" --dbname "${POSTGRES_DB}" -p "${POSTGRESQL_PORT_NUMBER}" <<-EOSQL
          select citus_add_node('${host}', ${POSTGRESQL_PORT_NUMBER});

          \c ${HEDERA_MIRROR_IMPORTER_DB_NAME}
          select citus_add_node('${host}', ${POSTGRESQL_PORT_NUMBER});
    EOSQL

        ((id = id + 1))
      done
    }

    # Common setup for coordinator and workers
    psql -v ON_ERROR_STOP=1 --username "${POSTGRES_USER}" --dbname "${POSTGRES_DB}" -p "${POSTGRESQL_PORT_NUMBER}" <<-EOSQL
      create extension if not exists citus;
      update pg_dist_node_metadata SET metadata=jsonb_insert(metadata, '{docker}', 'true');
      insert into pg_dist_authinfo(nodeid, rolename, authinfo) values(0, '${POSTGRES_USER}', 'password=${POSTGRES_PASSWORD}');

      \c ${HEDERA_MIRROR_IMPORTER_DB_NAME}
      create extension if not exists citus;
      create user ${HEDERA_MIRROR_IMPORTER_DB_RESTUSERNAME} with login password '${HEDERA_MIRROR_IMPORTER_DB_RESTPASSWORD}' in role readonly;
      insert into pg_dist_authinfo(nodeid, rolename, authinfo) values
        (0, '${POSTGRES_USER}', 'password=${POSTGRES_PASSWORD}'),
        (0, '${HEDERA_MIRROR_GRAPHQL_DB_USERNAME}', 'password=${HEDERA_MIRROR_GRAPHQL_DB_PASSWORD}'),
        (0, '${HEDERA_MIRROR_GRPC_DB_USERNAME}', 'password=${HEDERA_MIRROR_GRPC_DB_PASSWORD}'),
        (0, '${HEDERA_MIRROR_IMPORTER_DB_USERNAME}', 'password=${HEDERA_MIRROR_IMPORTER_DB_PASSWORD}'),
        (0, '${HEDERA_MIRROR_IMPORTER_DB_OWNER}', 'password=${HEDERA_MIRROR_IMPORTER_DB_OWNERPASSWORD}'),
        (0, '${HEDERA_MIRROR_IMPORTER_DB_RESTUSERNAME}', 'password=${HEDERA_MIRROR_IMPORTER_DB_RESTPASSWORD}'),
        (0, '${HEDERA_MIRROR_ROSETTA_DB_USERNAME}', 'password=${HEDERA_MIRROR_ROSETTA_DB_PASSWORD}'),
        (0, '${HEDERA_MIRROR_WEB3_DB_USERNAME}', 'password=${HEDERA_MIRROR_WEB3_DB_PASSWORD}');
    EOSQL

    if [[ "${POSTGRES_REPLICATION_MODE}" = "master" ]]; then
      setup_coordinator
    fi
  {{- end }}
