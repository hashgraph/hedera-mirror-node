{{- if .Values.timescaledb.enabled -}}
apiVersion: v1
kind: Secret
metadata:
  labels: {{- include "hedera-mirror.labels" . | nindent 4 }}
  name: timescaledb-init
  namespace: {{ include "hedera-mirror.namespace" . }}
stringData:
  {{- $dbName := .Values.importer.config.hedera.mirror.importer.db.name }}
  {{- $dbOwner := .Values.importer.config.hedera.mirror.importer.db.owner }}
  {{- $dbOwnerPassword := .Values.importer.config.hedera.mirror.importer.db.ownerPassword }}
  {{- $importerUser := .Values.importer.config.hedera.mirror.importer.db.username }}
  {{- $importerPassword := .Values.importer.config.hedera.mirror.importer.db.password }}
  {{- $grpcUsername := .Values.grpc.config.hedera.mirror.grpc.db.username }}
  {{- $grpcPassword := .Values.grpc.config.hedera.mirror.grpc.db.password }}
  {{- $restUser := .Values.global.rest.username }}
  {{- $restPassword := .Values.global.rest.password }}
  {{- $dbSchema := .Values.importer.config.hedera.mirror.importer.db.schema }}

  init.sh: |-
    #!/bin/bash
    echo "local   {{ $dbName }}     {{ $dbOwner }}               trust" >> /var/lib/postgresql/data/pg_hba.conf
    pg_ctl reload

  init.sql: |-
    -- Create database & owner
    create user {{ $dbOwner }} with login password '{{ $dbOwnerPassword }}';
    create database {{ $dbName }} with owner {{ $dbOwner }};
    alter database {{ $dbName }} set timescaledb.telemetry_level = off;
    -- Add extensions
    create extension if not exists pg_stat_statements;
    -- Create roles
    create role readonly;
    create role readwrite in role readonly;
    -- Create users
    create user {{ $grpcUsername }} with login password '{{ $grpcPassword }}' in role readonly;
    create user {{ $restUser }} with login password '{{ $restPassword }}' in role readonly;
    create user {{ $importerUser }} with login password '{{ $importerPassword }}' in role readwrite;
    -- Alter search path
    alter user {{ $dbOwner }} set search_path = {{ $dbSchema }}, public;
    alter user {{ $importerUser }} set search_path = {{ $dbSchema }}, public;
    alter user {{ $grpcUsername }} set search_path = {{ $dbSchema }}, public;
    alter user {{ $restUser }} set search_path = {{ $dbSchema }}, public;
    -- Create schema
    \connect {{ $dbName }} {{ $dbOwner }}
    create schema if not exists {{ $dbSchema }} authorization {{ $dbOwner }};
    grant usage on schema {{ $dbSchema }} to public;
    revoke create on schema {{ $dbSchema }} from public;
    -- Grant readonly privileges
    grant connect on database {{ $dbName }} to readonly;
    grant select on all tables in schema {{ $dbSchema }} to readonly;
    grant select on all sequences in schema {{ $dbSchema }} to readonly;
    grant usage on schema {{ $dbSchema }} to readonly;
    alter default privileges in schema {{ $dbSchema }} grant select on tables to readonly;
    alter default privileges in schema {{ $dbSchema }} grant select on sequences to readonly;
    -- Grant readwrite privileges
    grant insert, update on all tables in schema {{ $dbSchema }} to readwrite;
    grant usage on all sequences in schema {{ $dbSchema }} to readwrite;
    alter default privileges in schema {{ $dbSchema }} grant insert, update on tables to readwrite;
    alter default privileges in schema {{ $dbSchema }} grant usage on sequences to readwrite;
{{- end -}}
