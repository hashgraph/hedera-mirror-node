{{- if .Values.timescaledb.enabled -}}
apiVersion: v1
kind: Secret
metadata:
  labels:
    {{- include "hedera-mirror.labels" . | nindent 4 }}
  name: {{ printf "%s-timescaledb-init" .Release.Name  }}
  namespace: {{ include "hedera-mirror.namespace" . }}
type: Opaque
stringData:
  init_v2.sql: |-
    {{- $dbName := .Values.importer.config.hedera.mirror.importer.db.name }}
    {{- $importerUser := .Values.importer.config.hedera.mirror.importer.db.username }}
    {{- $importerPassword := .Values.importer.config.hedera.mirror.importer.db.password }}
    {{- $grpcUsername := .Values.grpc.config.hedera.mirror.grpc.db.username }}
    {{- $grpcPassword := .Values.grpc.config.hedera.mirror.grpc.db.password }}
    {{- $restUser := .Values.global.rest.username }}
    {{- $restPassword := .Values.global.rest.password }}
    create database {{ $dbName }};
    \c {{ $dbName }};
    create extension if not exists timescaledb cascade;
    create user {{ $importerUser }} with login password '{{ $importerPassword }}';
    create role viewer;
    create user {{ $grpcUsername }} with login password '{{ $grpcPassword }}' in role viewer;
    create user {{ $restUser }} with login password '{{ $restPassword }}' in role viewer;
    grant select on all tables in schema public to {{ $importerUser }};
    grant select on all tables in schema public to viewer;
    alter default privileges for role {{ $importerUser }} in schema public grant select on tables to viewer;
    create extension pg_stat_statements;
  {{- end -}}
