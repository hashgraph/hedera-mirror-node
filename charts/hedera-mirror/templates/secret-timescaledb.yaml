{{- if .Values.timescaledb.enabled -}}
apiVersion: v1
kind: Secret
metadata:
  labels:
    {{- include "hedera-mirror.labels" . | nindent 4 }}
  name: {{ include "hedera-mirror.dbHost" . }}-init
  namespace: {{ include "hedera-mirror.namespace" . }}
type: Opaque
stringData:
  users_v2.sql: |-
    {{- $dbName := .Values.importer.config.hedera.mirror.importer.db.name }}
    {{- $dbOwner := .Values.importer.config.hedera.mirror.importer.db.owner }}
    {{- $dbOwnerPassword := .Values.importer.config.hedera.mirror.importer.db.ownerPassword }}
    {{- $importerUser := .Values.importer.config.hedera.mirror.importer.db.username }}
    {{- $importerPassword := .Values.importer.config.hedera.mirror.importer.db.password }}
    {{- $grpcUsername := .Values.grpc.config.hedera.mirror.grpc.db.username }}
    {{- $grpcPassword := .Values.grpc.config.hedera.mirror.grpc.db.password }}
    {{- $restUser := .Values.global.rest.username }}
    {{- $restPassword := .Values.global.rest.password }}
    {{- $dbSchema := .Values.importer.config.hedera.mirror.importer.db.schema }}

    -- create owner user
    create user {{ $dbOwner }} with login password '{{ $dbOwnerPassword }}';

    -- create primary user and db
    create database {{ $dbName }} with owner {{ $dbOwner }};

    -- create roles
    create role readonly;
    create role readwrite in role readonly;

    -- create users
    create user {{ $grpcUsername }} with login password '{{ $grpcPassword }}' in role readonly;
    create user {{ $restUser }} with login password '{{ $restPassword }}' in role readonly;
    create user {{ $importerUser }} with login password '{{ $importerPassword }}' in role readwrite;

    -- drop timescaledb extension for future install to ensure availability in custom schema
    drop extension if exists timescaledb cascade;
  schema_v2.sql: |-
    -- create schema and set schema user permissions
    create schema if not exists {{ $dbSchema }} authorization {{ $dbOwner }};
    grant usage on schema {{ $dbSchema }} to public;

    -- revoke default public permissions on schema
    revoke create on schema {{ $dbSchema }} from public;

    -- grant connect and schema access to readonly role
    grant connect on database {{ $dbName }} to readonly;
    grant usage on schema {{ $dbSchema }} to readonly;

    -- grant select privileges on tables to readonly
    -- grant all privileges on all tables in schema {{ $dbSchema }} to {{ $dbOwner }};
    grant select on all tables in schema {{ $dbSchema }} to readonly;
    alter default privileges in schema {{ $dbSchema }} grant select on tables to readonly;

    -- grant select privileges on sequences to readonly
    -- grant all privileges on all sequences in schema {{ $dbSchema }} to {{ $dbOwner }};
    grant select on all sequences in schema {{ $dbSchema }} to readonly;
    alter default privileges in schema {{ $dbSchema }} grant select on sequences to readonly;

    -- grant write privileges on sequences to readwrite
    grant insert, update, delete on all tables in schema {{ $dbSchema }} to readwrite;
    alter default privileges in schema {{ $dbSchema }} grant insert, update on tables to readwrite;
    grant usage on all sequences in schema {{ $dbSchema }} to readwrite;
    alter default privileges in schema {{ $dbSchema }} grant usage on sequences to readwrite;
  path_v2.sql: |-
    \c {{ $dbName }};
    -- alter search path for given schema
    alter user {{ $dbOwner }} set search_path = {{ $dbSchema }}, public;
    alter user {{ $importerUser }} set search_path = {{ $dbSchema }}, public;
    alter user {{ $grpcUsername }} set search_path = {{ $dbSchema }}, public;
    alter user {{ $restUser }} set search_path = {{ $dbSchema }}, public;

    -- add extensions, ensuring they're available to new schema
    create extension if not exists timescaledb cascade schema {{ $dbSchema }};
    create extension if not exists pg_stat_statements cascade schema {{ $dbSchema }};
{{- end -}}
