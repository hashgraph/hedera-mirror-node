{{- if .Values.timescaledb.enabled -}}
apiVersion: v1
kind: Secret
metadata:
  labels:
    {{- include "hedera-mirror.labels" . | nindent 4 }}
  name: {{ printf "%s-timescaledb-init" .Release.Name  }}
  namespace: {{ include "hedera-mirror.namespace" . }}
type: Opaque
stringData:
  init.sql: |-
    {{- $dbname := .Values.importer.config.hedera.mirror.importer.db.name }}
    {{- $importeruser := .Values.importer.config.hedera.mirror.importer.db.username }}
    {{- $importerpassword := .Values.importer.config.hedera.mirror.importer.db.password }}
    {{- $grpcUsername := .Values.grpc.config.hedera.mirror.grpc.db.username }}
    {{- $grpcPassword := .Values.grpc.config.hedera.mirror.grpc.db.password }}
    {{- $restuser := .Values.global.rest.username }}
    {{- $restpassword := .Values.global.rest.password }}
    create database {{ $dbname }};
    \c {{ $dbname }};
    create extension if not exists timescaledb cascade;
    create user {{ $importeruser }} with login password '{{ $importerpassword }}';
    create role viewer;
    create user {{ $grpcUsername }} with login password '{{ $grpcPassword }}' in role viewer;
    create user {{ $restuser }} with login password '{{ $restpassword }}' in role viewer;
    grant select on all tables in schema public to {{ $importeruser }};
    grant select on all tables in schema public to viewer;
    alter default privileges for role {{ $importeruser }} in schema public grant select on tables to viewer;
    create extension pg_stat_statements;
  {{- end -}}
