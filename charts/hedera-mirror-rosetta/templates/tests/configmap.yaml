{{- if .Values.test.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    helm.sh/hook: test-success
    helm.sh/hook-delete-policy: before-hook-creation,hook-failed,hook-succeeded
  labels:
    {{- include "hedera-mirror-rosetta.labels" . | nindent 4 }}
  name: {{ include "hedera-mirror-rosetta.fullname" . }}-test
  namespace: {{ include "hedera-mirror-rosetta.namespace" . }}
data:
  test.sh: |-
    #!/usr/bin/env bash
    set -o pipefail
    set -o errexit

    URI='http://{{ include "hedera-mirror-rosetta.fullname" . }}:{{ .Values.service.port }}'

    function setup() {
      apk add -qu curl jq
    }

    # Infinite loop is okay since helm test itself has a timeout
    function has_data() {
      local path="${1}"
      local data="${2}"
      until (curl -fsL -H "Content-Type: application/json"  "${URI}/${path}" -d "${data}"); do
        echo "Waiting for ${URI}/${path} with data ${data}" >&3
        sleep 2
      done
    }

    @test "Network list" {
      has_data "network/list" "{\"metadata\":{}}"
    }

    @test "Network status" {
      local identifier=$(has_data "network/list" "{\"metadata\":{}}" | jq -rc '.network_identifiers[0]')
      has_data "network/status" "{\"network_identifier\":${identifier}}"
    }

    {{ if .Values.test.checkRecent -}}
    @test "Has recent data" {
      local identifier=$(has_data "network/list" "{\"metadata\":{}}" | jq -rc '.network_identifiers[0]')
      local timestamp=$(has_data "network/status" "{\"network_identifier\":${identifier}} | jq '.current_block_timestamp'")

      until [[ $(has_data "network/status" "{\"network_identifier\":${identifier}} | jq '.current_block_timestamp'") > "${timestamp}" ]]; do
        echo "Waiting for new data after ${timestamp}" >&3
        sleep 2
      done
    }
    {{- end }}
{{- end -}}

