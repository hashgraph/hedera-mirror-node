affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          topologyKey: kubernetes.io/hostname
          labelSelector:
            matchLabels:
              app.kubernetes.io/component: rosetta

alertmanager:
  inhibitRules:
    enabled: false
    RosettaInhibitAll:
      enabled: true
      matches:
        - sourceMatch:
            - name: area
              value: resource
          targetMatch:
            - name: application
              value: hedera-mirror-rosetta
          equal:
            - namespace
            - pod

annotations: {}

config: {}

# Environment variables to add to the container. The value can either be a string or an EnvVarSource. Evaluated as a template.
env:
  CONFIG_PATH: "/usr/etc/hedera/"
  # FOO:
  #   valueFrom:
  #     secretKeyRef:
  #       name: '{{ .Release.Name }}-custom'
  #       key: BAR

# Add config maps or secrets as environment variables. Evaluated as a template.
envFrom: []
# - secretRef:
#     name: '{{ .Release.Name }}-env'

fullnameOverride: ""

global:
  image: {}
  middleware: false
  namespaceOverride: ""
  podAnnotations: {}

hpa:
  behavior: {}
  enabled: true
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
  minReplicas: 1

image:
  pullPolicy: IfNotPresent
  registry: gcr.io
  repository: mirrornode/hedera-mirror-rosetta
  tag: ""  # Defaults to the chart's app version

imagePullSecrets: []

ingress:
  annotations:
    traefik.ingress.kubernetes.io/router.middlewares: '{{ include "hedera-mirror-rosetta.namespace" . }}-{{ include "hedera-mirror-rosetta.fullname" . }}@kubernetescrd'
  enabled: true
  hosts:
    - host: ""
      paths:
        - "/rosetta/account"
        - "/rosetta/block"
        - "/rosetta/call"
        - "/rosetta/construction"
        - "/rosetta/events"
        - "/rosetta/mempool"
        - "/rosetta/network"
        - "/rosetta/search"
  tls:
    enabled: false
    secretName: ""

labels: {}

livenessProbe:
  failureThreshold: 5
  httpGet:
    path: /health/liveness
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 2

middleware:
  - circuitBreaker:
      expression: NetworkErrorRatio() > 0.25 || ResponseCodeRatio(500, 600, 0, 600) > 0.25
  - inFlightReq:
      amount: 5
      sourceCriterion:
        ipStrategy:
          depth: 1
  - rateLimit:
      average: 10
      sourceCriterion:
        requestHost: true
  - retry:
      attempts: 3
      initialInterval: 100ms
  - stripPrefix:
      prefixes:
        - "/rosetta"

nodeSelector: {}

podAnnotations: {}

podDisruptionBudget:
  enabled: false
  # maxUnavailable: 0
  minAvailable: 50%

podSecurityContext:
  fsGroup: 1000
  runAsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

priorityClassName: ""

prometheusRules:
  enabled: false
  RosettaApiErrors:
    annotations:
      description: "Rosetta API 5xx error rate for {{ $labels.namespace }}/{{ $labels.pod }} is {{ $value | humanizePercentage }}"
      summary: "Mirror Rosetta API error rate exceeds 5%"
    enabled: true
    expr: sum(rate(hedera_mirror_rosetta_request_duration_count{application="hedera-mirror-rosetta",status_code=~"^5.."}[5m])) by (namespace, pod) / sum(rate(hedera_mirror_rosetta_request_duration_count{application="hedera-mirror-rosetta"}[5m])) by (namespace, pod) > 0.05
    for: 1m
    labels:
      application: hedera-mirror-rosetta
      severity: critical

  RosettaNoPodsReady:
    annotations:
      description: "No Rosetta API instances are currently running in {{ $labels.namespace }}"
      summary: No Rosetta API instances running
    enabled: true
    expr: sum(kube_pod_status_ready{pod=~".*-rosetta-.*",condition="true"}) by (namespace) < 1
    for: 2m
    labels:
      application: hedera-mirror-rosetta
      area: resource
      severity: critical

  RosettaNoRequests:
    annotations:
      description: "Rosetta API has not seen any requests to {{ $labels.namespace }} for 5m"
      summary: "No Mirror Rosetta API requests seen for awhile"
    enabled: false
    expr: sum(rate(hedera_mirror_rosetta_request_duration_count{application="hedera-mirror-rosetta"}[3m])) by (namespace) <= 0
    for: 5m
    labels:
      application: hedera-mirror-rosetta
      severity: warning

  RosettaSlowResponse:
    annotations:
      description: "{{ $labels.namespace }}/{{ $labels.pod }} is taking {{ $value | humanizeDuration }} to generate a response"
      summary: "Mirror Rosetta API is taking too long to respond"
    enabled: true
    expr: sum(rate(hedera_mirror_rosetta_request_duration_sum{application="hedera-mirror-rosetta"}[5m])) by (namespace, pod) / sum(rate(hedera_mirror_rosetta_request_duration_count{application="hedera-mirror-rosetta"}[5m])) by (namespace, pod) > 2000
    for: 1m
    labels:
      application: hedera-mirror-rosetta
      severity: warning

readinessProbe:
  failureThreshold: 5
  httpGet:
    path: /health/readiness
    port: http
  initialDelaySeconds: 30
  timeoutSeconds: 2

# Only set if HPA is disabled
# replicas: 1

resources:
  limits:
    cpu: 500m
    memory: 200Mi
  requests:
    cpu: 50m
    memory: 64Mi

revisionHistoryLimit: 3

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop: [ALL]
  readOnlyRootFilesystem: true

service:
  annotations: {}
  port: 80
  type: ClusterIP

serviceAccount:
  create: true
  # The name of the service account to use. If not set and create is true, a name is generated using the fullname template
  name:

serviceMonitor:
  enabled: false
  interval: 30s

terminationGracePeriodSeconds: 60

test:
  enabled: true
  image:
    pullPolicy: IfNotPresent
    repository: postman/newman
    tag: 5.3.1-alpine
  postman: ""  # Custom postman.json in base64 encoding

tolerations: []

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 10%
    maxUnavailable: 25%

# Volume mounts to add to the container. The key is the volume name and the value is the volume mount definition. The same keys should also appear in volumes below.
volumeMounts:
  config:
    mountPath: /usr/etc/hedera

# Volume to add to the container. The key is the volume name and the value is the volume definition. Evaluated as a template.
volumes:
  config:
    secret:
      defaultMode: 420
      secretName: '{{ include "hedera-mirror-rosetta.fullname" . }}'
