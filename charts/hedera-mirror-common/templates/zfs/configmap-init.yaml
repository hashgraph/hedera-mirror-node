{{- if .Values.zfs.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  labels: {{ include "hedera-mirror-common.labels" . | nindent 4 }}
    app: zfs-init
  name: node-init-entrypoint
  namespace: {{ include "hedera-mirror-common.namespace" . }}
data:
  entrypoint.sh: |
    #!/usr/bin/env bash
    
    set -euo pipefail

    DEBIAN_FRONTEND=noninteractive
    ROOT_MOUNT_DIR="${ROOT_MOUNT_DIR:-/root}"
    DISK_SIZE_COORDINATOR=${DISK_SIZE_COORDINATOR:-75GB}
    DISK_SIZE_WORKER=${DISK_SIZE_WORKER:-152GB}

    echo "Installing dependencies"
    apt-get update
    apt-get install -y apt-transport-https curl gnupg lsb-release ca-certificates

    echo "Installing gcloud SDK"
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 467B942D3A79BD29
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | \
     tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | \
     apt-key --keyring /usr/share/keyrings/cloud.google.gpg  add - 
    apt-get update -y
    apt-get install google-cloud-cli jq -y

    echo "Getting node metadata"
    NODE_NAME="$(curl -sS http://metadata.google.internal/computeMetadata/v1/instance/hostname -H 'Metadata-Flavor: Google' | awk -F'.' '{print $1}')"
    ZONE="$(curl -sS http://metadata.google.internal/computeMetadata/v1/instance/zone -H 'Metadata-Flavor: Google' | awk -F  "/" '{print $NF}')"
    
    # Point to the internal API server hostname
    APISERVER=https://kubernetes.default.svc
    SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
    TOKEN=$(cat ${SERVICEACCOUNT}/token)
    CACERT=${SERVICEACCOUNT}/ca.crt
    
    echo "Getting node labels"
    NODE_LABELS="$(curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET ${APISERVER}/api/v1/nodes/${NODE_NAME})"
    CITUS_ROLE="$(echo $NODE_LABELS | jq -r '.metadata.labels["citus-role"]')"
    NODE_ID="$(echo $NODE_LABELS | jq -r '.metadata.labels["openebs.io/nodeid"]')"
    ATTEMPT_COUNT=1
    while [[ "$CITUS_ROLE" == "null" || "$NODE_ID" == "null" ]]
    do
      if [[ $ATTEMPT_COUNT -ge 13 ]]
      then
        echo "Timed out waiting for labels please set citus-role and openebs.io/nodeid"
        exit 1
      fi
      ATTEMPT_COUNT=$((ATTEMPT_COUNT+1))
      echo "Retrying label GET attempt: $ATTEMPT_COUNT"
      NODE_LABELS="$(curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET ${APISERVER}/api/v1/nodes/${NODE_NAME})"
      CITUS_ROLE="$(echo $NODE_LABELS | jq -r '.metadata.labels["citus-role"]')"
      NODE_ID="$(echo $NODE_LABELS | jq -r '.metadata.labels["openebs.io/nodeid"]')"
      sleep 10
    done
    
    DISK_NAME="$NODE_ID-zfs"
    echo "Setting up disk $DISK_NAME for $CITUS_ROLE on zfs node $NODE_ID"
    
    if [[ "$CITUS_ROLE" == *"worker"* ]]; then
        DISK_SIZE=$DISK_SIZE_WORKER
    else
        DISK_SIZE=$DISK_SIZE_COORDINATOR
    fi

    if ! gcloud compute disks list --filter="name:$DISK_NAME" | grep "$DISK_NAME" > /dev/null; then
        echo "Creating $DISK_NAME for $CITUS_ROLE with size $DISK_SIZE"
        gcloud compute disks create "$DISK_NAME" --size="$DISK_SIZE" --zone="$ZONE" --type=pd-balanced
    else
        echo "$DISK_NAME already exists for $CITUS_ROLE"
    fi

    if ! gcloud compute instances describe "$NODE_NAME" --zone "$ZONE" --format '(disks[].source)' | grep "$DISK_NAME" > /dev/null; then        
        ATTACH_ATTEMPTS=0
        COMMAND_STATUS=1
        until [[ $COMMAND_STATUS -eq 0 || $ATTACH_ATTEMPTS -ge 13 ]]; do
          gcloud compute instances attach-disk "$NODE_NAME" --device-name=sdb --disk "$DISK_NAME" --zone "$ZONE"
          COMMAND_STATUS=$?
          ATTACH_ATTEMPTS=$((ATTACH_ATTEMPTS+1))
          sleep 10
        done
    
        if [[ $COMMAND_STATUS != 0 ]]; then
          echo "Unable to attach $DISK_NAME to $NODE_NAME in $ZONE";
          exit 1
        fi
    else
        echo "$DISK_NAME is already attached to $NODE_NAME"
    fi

    echo "Configuring zpool {{ .Values.zfs.parameters.poolname }}"
    chroot "${ROOT_MOUNT_DIR}" /bin/bash -x <<'EOF'
    
      echo "Installing zfs"
      apt-get update
      apt-get install -y zfsutils-linux
      
      if zfs list | grep -q '{{ .Values.zfs.parameters.poolname }}';
        then
          echo "found pool {{ .Values.zfs.parameters.poolname }}. Skipping creation"
      elif zpool create {{ .Values.zfs.parameters.poolname }} /dev/sdb;
        then
          echo "Successfully created pool {{ .Values.zfs.parameters.poolname }}"
      elif zpool import -f {{ .Values.zfs.parameters.poolname }};
        then
          echo "Successfully imported pool {{ .Values.zfs.parameters.poolname }}"
      else
        echo "Unable to create pool {{ .Values.zfs.parameters.poolname }}. Manual intervention necessary"
        exit 1        
      fi
    EOF

  {{- end -}}