{{- if .Values.zfs.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: entrypoint
  labels:
    app: zfs-init
data:
  entrypoint.sh: |
    #!/usr/bin/env bash
    
    set -euo pipefail

    DEBIAN_FRONTEND=noninteractive
    ROOT_MOUNT_DIR="${ROOT_MOUNT_DIR:-/root}"
    DISK_SIZE=${DISK_SIZE:-152GB}

    echo "Installing dependencies"
    apt-get update
    apt-get install -y apt-transport-https curl gnupg lsb-release

    echo "Installing gcloud SDK"
    export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
    echo "deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    apt-get update
    apt-get install -y google-cloud-sdk

    echo "Getting node metadata"
    NODE_NAME="$(curl -sS http://metadata.google.internal/computeMetadata/v1/instance/name -H 'Metadata-Flavor: Google')"
    ZONE="$(curl -sS http://metadata.google.internal/computeMetadata/v1/instance/zone -H 'Metadata-Flavor: Google' | awk -F  "/" '{print $4}')"

    echo "Setting up disks"
    DISK_NAME="$NODE_NAME-zfs"

    if ! gcloud compute disks list --filter="name:$DISK_NAME" | grep "$DISK_NAME" > /dev/null; then
        echo "Creating $DISK_NAME"
        gcloud compute disks create "$DISK_NAME" --size="$DISK_SIZE" --zone="$ZONE" --type=pd-balanced
    else
        echo "$DISK_NAME already exists"
    fi

    if ! gcloud compute instances describe "$NODE_NAME" --zone "$ZONE" --format '(disks[].source)' | grep "$DISK_NAME" > /dev/null; then
        echo "Attaching $DISK_NAME to $NODE_NAME"
        gcloud compute instances attach-disk "$NODE_NAME" --device-name=sdb --disk "$DISK_NAME" --zone "$ZONE"
    else
        echo "$DISK_NAME is already attached to $NODE_NAME"
    fi

    echo "Configuring zpool {{ .Values.zfs.parameters.poolname }}"
    chroot "${ROOT_MOUNT_DIR}" /bin/bash -x <<'EOF'
    
      echo "Installing zfs"
      apt-get update
      apt-get install -y zfsutils-linux
      
      if zfs list | grep -q '{{ .Values.zfs.parameters.poolname }}'; 
      then
        echo "found pool {{ .Values.zfs.parameters.poolname }}. Skipping creation"
      else
        if zpool create {{ .Values.zfs.parameters.poolname }} /dev/sdb
          then
            echo "Successfully created pool {{ .Values.zfs.parameters.poolname }}"
          elif zpool import -f {{ .Values.zfs.parameters.poolname }};
            then
              echo "Successfully imported pool {{ .Values.zfs.parameters.poolname }}"
          else
            echo "Unable to create pool {{ .Values.zfs.parameters.poolname }}. Manual intervention necessary"
            exit 1
        fi
        
      fi
    EOF

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-initializer-worker
  labels:
    app: zfs-init
spec:
  selector:
    matchLabels:
      app: zfs-init
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: node-initializer-worker
        app: zfs-init
    spec:
      tolerations: {{ toYaml .Values.zfs.zfsController.tolerations | nindent 8 }}
      nodeSelector: {{ toYaml .Values.zfs.worker.nodeSelector | nindent 8 }}
      volumes:
        - name: root-mount
          hostPath:
            path: /
        - name: entrypoint
          configMap:
            name: entrypoint
            defaultMode: 0744
      initContainers:
        - image: ubuntu:18.04
          name: node-initializer-worker
          command: ["/scripts/entrypoint.sh"]
          args: []
          env:
            - name: ROOT_MOUNT_DIR
              value: /root
            - name: DISK_SIZE
              value: {{ .Values.zfs.worker.diskSize }}
          securityContext:
            privileged: true
          volumeMounts:
            - name: root-mount
              mountPath: /root
            - name: entrypoint
              mountPath: /scripts
      containers:
        - image: "gcr.io/google-containers/pause:2.0"
          name: pause
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-initializer-coordinator
  labels:
    app: zfs-init
spec:
  selector:
    matchLabels:
      app: zfs-init
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: node-initializer-coordinator
        app: zfs-init
    spec:
      tolerations: {{ toYaml .Values.zfs.zfsController.tolerations | nindent 8 }}
      nodeSelector: {{ toYaml .Values.zfs.primary.nodeSelector | nindent 8 }}
      volumes:
        - name: root-mount
          hostPath:
            path: /
        - name: entrypoint
          configMap:
            name: entrypoint
            defaultMode: 0744
      initContainers:
        - image: ubuntu:18.04
          name: node-initializer-coordinator
          command: ["/scripts/entrypoint.sh"]
          args: []
          env:
            - name: ROOT_MOUNT_DIR
              value: /root
            - name: DISK_SIZE
              value: {{ .Values.zfs.primary.diskSize }}
          securityContext:
            privileged: true
          volumeMounts:
            - name: root-mount
              mountPath: /root
            - name: entrypoint
              mountPath: /scripts
      containers:
        - image: "gcr.io/google-containers/pause:2.0"
          name: pause
  {{- end -}}