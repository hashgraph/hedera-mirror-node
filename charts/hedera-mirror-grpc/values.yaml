affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          topologyKey: kubernetes.io/hostname
          labelSelector:
            matchLabels:
              app.kubernetes.io/component: grpc

annotations: {}

config:
  hedera:
    mirror:
      grpc:
        db: {}

fullnameOverride: ""

global:
  namespaceOverride: ""
  redis:
    password: redis_password

hpa:
  enabled: false
  maxReplicas: 3
  minReplicas: 1
  utilization: 80

image:
  pullPolicy: IfNotPresent
  repository: gcr.io/mirrornode/hedera-mirror-grpc
  tag: ""  # Default to the chart's app version

imagePullSecrets: []

ingress:
  annotations:
    traefik.ingress.kubernetes.io/router.middlewares: '{{ include "hedera-mirror-grpc.namespace" . }}-{{ include "hedera-mirror-grpc.fullname" . }}@kubernetescrd'
  enabled: true
  hosts:
    - host: ""
      paths:
        - "/com.hedera.mirror.api.proto.ConsensusService"
        - "/grpc.reflection.v1alpha.ServerReflection"
  middleware:
    circuitBreaker: NetworkErrorRatio() > 0.10 || ResponseCodeRatio(500, 600, 0, 600) > 0.25
    connectionsPerIP: 5
    enabled: false
    ipWhitelist:
      - 0.0.0.0/0
    rateLimit:
      average: 100
      burst: 250
  tls:
    enabled: false
    secretName: ""

labels: {}

livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: http
  initialDelaySeconds: 50
  periodSeconds: 10
  timeoutSeconds: 2

nodeSelector: {}

podSecurityContext:
  fsGroup: 1000

priorityClassName: ""

rbac:
  enabled: true

readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: http
  initialDelaySeconds: 40
  timeoutSeconds: 2

# Only set if HPA is disabled
# replicas: 1

resources:
  limits:
    cpu: 500m
    memory: 750Mi
  requests:
    cpu: 100m
    memory: 128Mi

revisionHistoryLimit: 3

securityContext:
  capabilities:
    drop: [ALL]
  readOnlyRootFilesystem: true
  runAsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

service:
  annotations:
    traefik.ingress.kubernetes.io/service.serversscheme: h2c
  port: 5600
  type: ClusterIP

serviceAccount:
  create: true
  # The name of the service account to use. If not set and create is true, a name is generated using the fullname template
  name:

serviceMonitor:
  enabled: false
  interval: 30s

terminationGracePeriodSeconds: 60

tolerations: []

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 10%
    maxUnavailable: 25%
