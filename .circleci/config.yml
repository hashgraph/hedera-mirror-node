version: 2.1

references:
  workspace_root: &workspace_root /tmp/workspace

  postgres_env: &postgres_env
    POSTGRES_DB: mirror_node_integration
    POSTGRES_PASSWORD: mirror_node_pass
    POSTGRES_USER: mirror_node

  # Docker images
  docker_jdk11: &docker_jdk11
    image: adoptopenjdk:11-jdk-hotspot

  docker_db: &docker_db
    image: postgres:9.6-alpine
    environment:
      <<: *postgres_env

  docker_pubsub: &docker_pubsub
    image: google/cloud-sdk:290.0.1
    command: [ "/bin/sh", "-c", "gcloud beta emulators pubsub start" ]

  docker_redis: &docker_redis
    image: redis:5.0.9-alpine

  machine_ubuntu: &machine_ubuntu
    machine:
      image: ubuntu-2004:202008-01

  # Maven helpers
  maven_opts: &maven_opts
    MAVEN_CLI_OPTS: --batch-mode --no-transfer-progress --show-version -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dskip.npm
    # Disable embedded testcontainers. Use externally provided postgres and pubsub emulator
    MAVEN_SPRING_OPTS: -Dspring.config.additional-location=file:${WORKSPACE}/ -Dembedded.containers.enabled=false -Dembedded.google.pubsub.enabled=false

commands:
  gcloud_image_untag:
    description: "Untags old master images"
    parameters:
      imagepath:
        type: string
        default: "importer"
    steps:
      - run:
          name: "Untags old master images"
          command: |
            set -ex
            UNTAG_BEFORE=$(date -d "-7 days" '+%FT%T')
            IMAGE_PATH=gcr.io/mirrornode/hedera-mirror-<< parameters.imagepath >>
            OLD_IMAGES=$(gcloud container images list-tags ${IMAGE_PATH} \
              --limit=1000 \
              --sort-by=TIMESTAMP \
              --filter="tags:master-* AND timestamp.datetime < '${UNTAG_BEFORE}'" \
              --format="csv[no-heading](digest,tags,timestamp)")
            for image in ${OLD_IMAGES[*]}; do
            (
              IFS=, read digest tag timestamp \<<< ${image}
              gcloud container images untag -q "${IMAGE_PATH}:${tag}"
            )
            done

  gcloud_image_delete:
    description: "Deletes old untagged images"
    parameters:
      imagepath:
        type: string
        default: "importer"
    steps:
      - run:
          name: "Deletes old untagged images"
          command: |
            set -ex
            DELETE_BEFORE=$(date -d "-7 days" '+%FT%T')
            IMAGE_PATH=gcr.io/mirrornode/hedera-mirror-<< parameters.imagepath >>
            OLD_IMAGES=$(gcloud container images list-tags ${IMAGE_PATH} \
              --limit=1000 \
              --sort-by=TIMESTAMP \
              --filter="-tags:* AND timestamp.datetime < '${DELETE_BEFORE}'" \
              --format="get(digest)")
            for digest in ${OLD_IMAGES[*]}; do
            (
              gcloud container images delete -q "${IMAGE_PATH}@${digest}"
            )
            done

  restore_maven_cache:
    description: "Restore maven cache"
    steps:
      - run:
          name: Calculate checksum of all pom.xml
          command: find . -type f -name "pom.xml" | sort -u | xargs sha512sum > pom.xml.checksum
      - restore_cache:
          keys:
            #  Perms on ~/.m2 differ by executor (docker/machine), so {{ arch }} is needed.
            - maven-v2-{{ arch }}-{{ .Branch }}-{{ checksum "pom.xml.checksum" }}
            - maven-v2-{{ arch }}-{{ .Branch }}
            - maven-v2-{{ arch }}-

  save_maven_cache:
    steps:
      - save_cache:
          key: maven-v2-{{ arch }}-{{ .Branch }}-{{ checksum "pom.xml.checksum" }}
          paths:
            - ~/.m2

  write_spring_override_config:
    steps:
      - run:
          name: Write spring override config
          command: |
            mkdir -p ${WORKSPACE}
            cat >> ${WORKSPACE}/application.yml \<< EOF
            db: &db
              db:
                host: 127.0.0.1
                port: 5432
                name: mirror_node_integration
                username: mirror_node
                password: mirror_node_pass
            hedera:
              mirror:
                importer:
                  \<<: *db
                grpc:
                  \<<: *db
            spring:
              redis:
                url: redis://127.0.0.1:6379
            ---
            spring:
              profiles: pubsub
              cloud:
                gcp:
                  pubsub:
                    projectId: my-project-id # Pubsub emulator's default values
                    emulator-host: 127.0.0.1:8085
            EOF

  collect_java_assets:
    parameters:
      module_name:
        type: string
    steps:
      - run:
          name: Collecting assets for << parameters.module_name >>
          command: |
            set -ex
            MODULE=<< parameters.module_name >>
            VERSION_TAG=${CIRCLE_TAG/*\//}
            NAME=${MODULE}-${VERSION_TAG:-b$CIRCLE_BUILD_NUM}
            mkdir -p ${WORKSPACE}/${NAME}
            mv ${MODULE}/target/${MODULE}-*-exec.jar ${WORKSPACE}/${NAME}/${NAME}.jar
            mv ${MODULE}/scripts ${WORKSPACE}/${NAME}
            mkdir -p ${WORKSPACE}/artifacts
            tar -czf ${WORKSPACE}/artifacts/${NAME}.tgz -C ${WORKSPACE} ${NAME}

  persist_artifacts_to_workspace:
    steps:
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - artifacts

  install_openjdk_11:
    description: "Install OpenJDK 11"
    steps:
      - run:
          name: Install OpenJDK 11
          command: |
            sudo add-apt-repository ppa:openjdk-r/ppa \
            && sudo apt-get update -q \
            && sudo apt install -y openjdk-11-jdk

workflows:
  main:
    jobs:
      - build_maven:
          filters: # required since `release_artifacts` has tag filters AND requires `this`
            branches:
              only: /.*/
            tags:
              only: /.*/
      - build_rest:
          filters: # required since `release_artifacts` has tag filters AND requires `this`
            branches:
              only: /.*/
            tags:
              only: /.*/
      - release_artifacts:
          requires:
            - build_maven
            - build_rest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - publish_images:
          requires:
            - build_maven
            - build_rest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^.*/
      - perf_maven:
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - cleanup_images:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^.*/

jobs:
  build_maven:
    environment:
      WORKSPACE: *workspace_root
      <<: *maven_opts
    docker:
      - *docker_jdk11
      - *docker_db
      - *docker_pubsub
      - *docker_redis
    steps:
      - checkout
      - restore_maven_cache
      - run:
          name: Resolve dependencies
          # See https://issues.apache.org/jira/browse/MDEP-516 for why we don't use maven-dependency-plugin
          command: ./mvnw ${MAVEN_CLI_OPTS} de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
      - save_maven_cache
      - write_spring_override_config
      - run:
          name: Running maven (validate, compile, test, package)
          command: ./mvnw ${MAVEN_CLI_OPTS} ${MAVEN_SPRING_OPTS} package -pl '!hedera-mirror-rosetta'
      - store_artifacts:
          path: hedera-mirror-importer/target/surefire-reports
          destination: /importer-surefire
      - store_artifacts:
          path: hedera-mirror-grpc/target/surefire-reports
          destination: /grpc-surefire
      - store_test_results:
          path: hedera-mirror-importer/target/surefire-reports
      - run:
          name: Upload Code Coverage
          command: bash <(curl -s https://codecov.io/bash)
      - collect_java_assets:
          module_name: hedera-mirror-grpc
      - collect_java_assets:
          module_name: hedera-mirror-importer
      - persist_artifacts_to_workspace

  perf_maven:
    environment:
      WORKSPACE: *workspace_root
      <<: *maven_opts
    docker:
      - *docker_jdk11
      - *docker_db
      - *docker_redis
    steps:
      - checkout
      - restore_maven_cache
      - write_spring_override_config
      - run:
          name: Running maven (integration)
          command: ./mvnw ${MAVEN_CLI_OPTS} ${MAVEN_SPRING_OPTS} integration-test --projects hedera-mirror-importer/ -P performance-test
      - save_maven_cache
      - store_test_results:
          path: hedera-mirror-importer/target/failsafe-reports

  build_rest:
    environment:
      WORKSPACE: *workspace_root
      <<: *postgres_env
    docker:
      - image: node:12.10.0
      - *docker_db
      - image: localstack/localstack:0.11.3
        environment:
          SERVICES: s3
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-v1-{{ .Branch }}-{{ checksum "hedera-mirror-rest/package-lock.json" }}
            - npm-v1-{{ .Branch }}
            - npm-v1-
      - run:
          working_directory: "hedera-mirror-rest"
          name: Resolve dependencies
          command: npm ci
      - save_cache:
          key: npm-v1-{{ .Branch }}-{{ checksum "hedera-mirror-rest/package-lock.json" }}
          paths:
            - node_modules
            - .node-flywaydb
            - ~/.npm
      - run:
          working_directory: "hedera-mirror-rest"
          name: Run npm test
          command: npm test -- --maxWorkers 2
          environment:
            TEST_S3_HOST: "127.0.0.1"
      - store_artifacts:
          path: hedera-mirror-rest/target/jest-junit
          destination: /rest-jest
      - store_test_results:
          path: hedera-mirror-rest/target/jest-junit
      - run:
          working_directory: "hedera-mirror-rest"
          name: Upload Code Coverage
          command: node_modules/codecov/bin/codecov
      - run:
          working_directory: "hedera-mirror-rest"
          name: Collecting assets
          command: |
            set -ex
            VERSION_TAG=${CIRCLE_TAG/*\//}
            NAME=hedera-mirror-rest-${VERSION_TAG:-b$CIRCLE_BUILD_NUM}
            npm pack
            mkdir -p ${WORKSPACE}/artifacts
            mv hedera-mirror-rest*.tgz ${WORKSPACE}/artifacts/${NAME}.tgz
      - persist_artifacts_to_workspace

  release_artifacts:
    docker:
      - *docker_jdk11
    steps:
      - attach_workspace:
          at: *workspace_root
      - store_artifacts:
          path: /tmp/workspace/artifacts

  publish_images:
    <<: *machine_ubuntu
    environment:
      <<: *maven_opts
      JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
      GOOGLE_APPLICATION_CREDENTIALS: json_key_file
    steps:
      - checkout
      - install_openjdk_11
      - run:
          name: Setup docker-credential-gcr
          command: |
            VERSION=2.0.0
            curl -fsSL "https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v${VERSION}/docker-credential-gcr_linux_amd64-${VERSION}.tar.gz" \
              | tar xz > docker-credential-gcr
            sudo mv docker-credential-gcr /usr/bin/docker-credential-gcr
            chmod +x /usr/bin/docker-credential-gcr
            echo ${GCR_JSON_KEY_FILE} > json_key_file
            docker-credential-gcr configure-docker
      - restore_maven_cache
      - run:
          name: Running maven deploy
          command: ./mvnw ${MAVEN_CLI_OPTS} deploy -DskipTests

  cleanup_images:
    <<: *machine_ubuntu
    steps:
      - checkout
      - run:
          name: GCloud Setup
          command: |
            echo ${GCR_JSON_KEY_FILE} | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project mirrornode
      - gcloud_image_untag:
          imagepath: "grpc"
      - gcloud_image_untag:
          imagepath: "importer"
      - gcloud_image_untag:
          imagepath: "monitor"
      - gcloud_image_untag:
          imagepath: "rest"
      - gcloud_image_untag:
          imagepath: "test"
      - gcloud_image_delete:
          imagepath: "grpc"
      - gcloud_image_delete:
          imagepath: "importer"
      - gcloud_image_delete:
          imagepath: "monitor"
      - gcloud_image_delete:
          imagepath: "rest"
      - gcloud_image_delete:
          imagepath: "test"
