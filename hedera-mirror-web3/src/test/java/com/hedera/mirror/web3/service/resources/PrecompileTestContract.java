/*
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hedera.mirror.web3.service.resources;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int32;
import org.web3j.abi.datatypes.generated.Int64;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.reflection.Parameterized;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.12.0.
 */
@SuppressWarnings("rawtypes")
public class PrecompileTestContract extends Contract {
    // new
    // public static final String BINARY =
    // "";
    // old
    public static final String BINARY =
            "";

    private static String librariesLinkedBinary;

    public static final String FUNC_GETCUSTOMFEESFORTOKEN = "getCustomFeesForToken";

    public static final String FUNC_GETEXPIRYINFOFORTOKEN = "getExpiryInfoForToken";

    public static final String FUNC_GETINFORMATIONFORFUNGIBLETOKEN = "getInformationForFungibleToken";

    public static final String FUNC_GETINFORMATIONFORNONFUNGIBLETOKEN = "getInformationForNonFungibleToken";

    public static final String FUNC_GETINFORMATIONFORTOKEN = "getInformationForToken";

    public static final String FUNC_GETTOKENDEFAULTFREEZE = "getTokenDefaultFreeze";

    public static final String FUNC_GETTOKENDEFAULTKYC = "getTokenDefaultKyc";

    public static final String FUNC_GETTOKENKEYPUBLIC = "getTokenKeyPublic";

    public static final String FUNC_GETTYPE = "getType";

    public static final String FUNC_HTSALLOWANCE = "htsAllowance";

    public static final String FUNC_HTSGETAPPROVED = "htsGetApproved";

    public static final String FUNC_HTSISAPPROVEDFORALL = "htsIsApprovedForAll";

    public static final String FUNC_ISKYCGRANTED = "isKycGranted";

    public static final String FUNC_ISTOKENADDRESS = "isTokenAddress";

    public static final String FUNC_ISTOKENFROZEN = "isTokenFrozen";

    public static final String FUNC_REDIRECTFORTOKEN = "redirectForToken";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFERFROMNFT = "transferFromNFT";

    public static final Event CALLRESPONSEEVENT_EVENT = new Event(
            "CallResponseEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    @Deprecated
    protected PrecompileTestContract(
            String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PrecompileTestContract(
            String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PrecompileTestContract(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PrecompileTestContract(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<CallResponseEventEventResponse> getCallResponseEventEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList =
                staticExtractEventParametersWithLog(CALLRESPONSEEVENT_EVENT, transactionReceipt);
        ArrayList<CallResponseEventEventResponse> responses =
                new ArrayList<CallResponseEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CallResponseEventEventResponse typedResponse = new CallResponseEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.param0 =
                    (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.param1 =
                    (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CallResponseEventEventResponse getCallResponseEventEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CALLRESPONSEEVENT_EVENT, log);
        CallResponseEventEventResponse typedResponse = new CallResponseEventEventResponse();
        typedResponse.log = log;
        typedResponse.param0 =
                (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.param1 = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<CallResponseEventEventResponse> callResponseEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCallResponseEventEventFromLog(log));
    }

    public Flowable<CallResponseEventEventResponse> callResponseEventEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALLRESPONSEEVENT_EVENT));
        return callResponseEventEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> getCustomFeesForToken(String token) {
        final Function function = new Function(
                FUNC_GETCUSTOMFEESFORTOKEN,
                Arrays.<Type>asList(new Address(160, token)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getExpiryInfoForToken(String token) {
        final Function function = new Function(
                FUNC_GETEXPIRYINFOFORTOKEN,
                Arrays.<Type>asList(new Address(160, token)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getInformationForFungibleToken(String token) {
        final Function function = new Function(
                FUNC_GETINFORMATIONFORFUNGIBLETOKEN,
                Arrays.<Type>asList(new Address(160, token)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getInformationForNonFungibleToken(
            String token, BigInteger serialNumber) {
        final Function function = new Function(
                FUNC_GETINFORMATIONFORNONFUNGIBLETOKEN,
                Arrays.<Type>asList(new Address(160, token), new Int64(serialNumber)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getInformationForToken(String token) {
        final Function function = new Function(
                FUNC_GETINFORMATIONFORTOKEN,
                Arrays.<Type>asList(new Address(160, token)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getTokenDefaultFreeze(String token) {
        final Function function = new Function(
                FUNC_GETTOKENDEFAULTFREEZE,
                Arrays.<Type>asList(new Address(160, token)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getTokenDefaultKyc(String token) {
        final Function function = new Function(
                FUNC_GETTOKENDEFAULTKYC,
                Arrays.<Type>asList(new Address(160, token)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getTokenKeyPublic(String token, BigInteger keyType) {
        final Function function = new Function(
                FUNC_GETTOKENKEYPUBLIC,
                Arrays.<Type>asList(new Address(160, token), new Uint256(keyType)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getType(String token) {
        final Function function = new Function(
                FUNC_GETTYPE, Arrays.<Type>asList(new Address(160, token)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> htsAllowance(String token, String owner, String spender) {
        final Function function = new Function(
                FUNC_HTSALLOWANCE,
                Arrays.<Type>asList(new Address(160, token), new Address(160, owner), new Address(160, spender)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> htsGetApproved(String token, BigInteger serialNumber) {
        final Function function = new Function(
                FUNC_HTSGETAPPROVED,
                Arrays.<Type>asList(new Address(160, token), new Uint256(serialNumber)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> htsIsApprovedForAll(String token, String owner, String operator) {
        final Function function = new Function(
                FUNC_HTSISAPPROVEDFORALL,
                Arrays.<Type>asList(new Address(160, token), new Address(160, owner), new Address(160, operator)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> isKycGranted(String token, String account) {
        final Function function = new Function(
                FUNC_ISKYCGRANTED,
                Arrays.<Type>asList(new Address(160, token), new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> isTokenAddress(String token) {
        final Function function = new Function(
                FUNC_ISTOKENADDRESS,
                Arrays.<Type>asList(new Address(160, token)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> isTokenFrozen(String token, String account) {
        final Function function = new Function(
                FUNC_ISTOKENFROZEN,
                Arrays.<Type>asList(new Address(160, token), new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> redirectForToken(String token, byte[] encodedFunctionSelector) {
        final Function function = new Function(
                FUNC_REDIRECTFORTOKEN,
                Arrays.<Type>asList(new Address(160, token), new DynamicBytes(encodedFunctionSelector)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(
            String token, String from, String to, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(
                        new Address(160, token), new Address(160, from), new Address(160, to), new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFromNFT(
            String token, String from, String to, BigInteger serialNumber) {
        final Function function = new Function(
                FUNC_TRANSFERFROMNFT,
                Arrays.<Type>asList(
                        new Address(160, token),
                        new Address(160, from),
                        new Address(160, to),
                        new Uint256(serialNumber)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static PrecompileTestContract load(
            String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PrecompileTestContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PrecompileTestContract load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new PrecompileTestContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PrecompileTestContract load(
            String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PrecompileTestContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PrecompileTestContract load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return new PrecompileTestContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PrecompileTestContract> deploy(
            Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                PrecompileTestContract.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<PrecompileTestContract> deploy(
            Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(
                PrecompileTestContract.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static RemoteCall<PrecompileTestContract> deploy(
            Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                PrecompileTestContract.class,
                web3j,
                transactionManager,
                contractGasProvider,
                getDeploymentBinary(),
                "");
    }

    @Deprecated
    public static RemoteCall<PrecompileTestContract> deploy(
            Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(
                PrecompileTestContract.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static void linkLibraries(List<LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class FixedFee extends StaticStruct {
        public BigInteger amount;

        public String tokenId;

        public Boolean useHbarsForPayment;

        public Boolean useCurrentTokenForPayment;

        public String feeCollector;

        public FixedFee(
                BigInteger amount,
                String tokenId,
                Boolean useHbarsForPayment,
                Boolean useCurrentTokenForPayment,
                String feeCollector) {
            super(
                    new Int64(amount),
                    new Address(160, tokenId),
                    new Bool(useHbarsForPayment),
                    new Bool(useCurrentTokenForPayment),
                    new Address(160, feeCollector));
            this.amount = amount;
            this.tokenId = tokenId;
            this.useHbarsForPayment = useHbarsForPayment;
            this.useCurrentTokenForPayment = useCurrentTokenForPayment;
            this.feeCollector = feeCollector;
        }

        public FixedFee(
                Int64 amount,
                Address tokenId,
                Bool useHbarsForPayment,
                Bool useCurrentTokenForPayment,
                Address feeCollector) {
            super(amount, tokenId, useHbarsForPayment, useCurrentTokenForPayment, feeCollector);
            this.amount = amount.getValue();
            this.tokenId = tokenId.getValue();
            this.useHbarsForPayment = useHbarsForPayment.getValue();
            this.useCurrentTokenForPayment = useCurrentTokenForPayment.getValue();
            this.feeCollector = feeCollector.getValue();
        }
    }

    public static class FractionalFee extends StaticStruct {
        public BigInteger numerator;

        public BigInteger denominator;

        public BigInteger minimumAmount;

        public BigInteger maximumAmount;

        public Boolean netOfTransfers;

        public String feeCollector;

        public FractionalFee(
                BigInteger numerator,
                BigInteger denominator,
                BigInteger minimumAmount,
                BigInteger maximumAmount,
                Boolean netOfTransfers,
                String feeCollector) {
            super(
                    new Int64(numerator),
                    new Int64(denominator),
                    new Int64(minimumAmount),
                    new Int64(maximumAmount),
                    new Bool(netOfTransfers),
                    new Address(160, feeCollector));
            this.numerator = numerator;
            this.denominator = denominator;
            this.minimumAmount = minimumAmount;
            this.maximumAmount = maximumAmount;
            this.netOfTransfers = netOfTransfers;
            this.feeCollector = feeCollector;
        }

        public FractionalFee(
                Int64 numerator,
                Int64 denominator,
                Int64 minimumAmount,
                Int64 maximumAmount,
                Bool netOfTransfers,
                Address feeCollector) {
            super(numerator, denominator, minimumAmount, maximumAmount, netOfTransfers, feeCollector);
            this.numerator = numerator.getValue();
            this.denominator = denominator.getValue();
            this.minimumAmount = minimumAmount.getValue();
            this.maximumAmount = maximumAmount.getValue();
            this.netOfTransfers = netOfTransfers.getValue();
            this.feeCollector = feeCollector.getValue();
        }
    }

    public static class RoyaltyFee extends StaticStruct {
        public BigInteger numerator;

        public BigInteger denominator;

        public BigInteger amount;

        public String tokenId;

        public Boolean useHbarsForPayment;

        public String feeCollector;

        public RoyaltyFee(
                BigInteger numerator,
                BigInteger denominator,
                BigInteger amount,
                String tokenId,
                Boolean useHbarsForPayment,
                String feeCollector) {
            super(
                    new Int64(numerator),
                    new Int64(denominator),
                    new Int64(amount),
                    new Address(160, tokenId),
                    new Bool(useHbarsForPayment),
                    new Address(160, feeCollector));
            this.numerator = numerator;
            this.denominator = denominator;
            this.amount = amount;
            this.tokenId = tokenId;
            this.useHbarsForPayment = useHbarsForPayment;
            this.feeCollector = feeCollector;
        }

        public RoyaltyFee(
                Int64 numerator,
                Int64 denominator,
                Int64 amount,
                Address tokenId,
                Bool useHbarsForPayment,
                Address feeCollector) {
            super(numerator, denominator, amount, tokenId, useHbarsForPayment, feeCollector);
            this.numerator = numerator.getValue();
            this.denominator = denominator.getValue();
            this.amount = amount.getValue();
            this.tokenId = tokenId.getValue();
            this.useHbarsForPayment = useHbarsForPayment.getValue();
            this.feeCollector = feeCollector.getValue();
        }
    }

    public static class Expiry extends StaticStruct {
        public BigInteger second;

        public String autoRenewAccount;

        public BigInteger autoRenewPeriod;

        public Expiry(BigInteger second, String autoRenewAccount, BigInteger autoRenewPeriod) {
            super(new Int64(second), new Address(160, autoRenewAccount), new Int64(autoRenewPeriod));
            this.second = second;
            this.autoRenewAccount = autoRenewAccount;
            this.autoRenewPeriod = autoRenewPeriod;
        }

        public Expiry(Int64 second, Address autoRenewAccount, Int64 autoRenewPeriod) {
            super(second, autoRenewAccount, autoRenewPeriod);
            this.second = second.getValue();
            this.autoRenewAccount = autoRenewAccount.getValue();
            this.autoRenewPeriod = autoRenewPeriod.getValue();
        }
    }

    public static class KeyValue extends DynamicStruct {
        public Boolean inheritAccountKey;

        public String contractId;

        public byte[] ed25519;

        public byte[] ECDSA_secp256k1;

        public String delegatableContractId;

        public KeyValue(
                Boolean inheritAccountKey,
                String contractId,
                byte[] ed25519,
                byte[] ECDSA_secp256k1,
                String delegatableContractId) {
            super(
                    new Bool(inheritAccountKey),
                    new Address(160, contractId),
                    new DynamicBytes(ed25519),
                    new DynamicBytes(ECDSA_secp256k1),
                    new Address(160, delegatableContractId));
            this.inheritAccountKey = inheritAccountKey;
            this.contractId = contractId;
            this.ed25519 = ed25519;
            this.ECDSA_secp256k1 = ECDSA_secp256k1;
            this.delegatableContractId = delegatableContractId;
        }

        public KeyValue(
                Bool inheritAccountKey,
                Address contractId,
                DynamicBytes ed25519,
                DynamicBytes ECDSA_secp256k1,
                Address delegatableContractId) {
            super(inheritAccountKey, contractId, ed25519, ECDSA_secp256k1, delegatableContractId);
            this.inheritAccountKey = inheritAccountKey.getValue();
            this.contractId = contractId.getValue();
            this.ed25519 = ed25519.getValue();
            this.ECDSA_secp256k1 = ECDSA_secp256k1.getValue();
            this.delegatableContractId = delegatableContractId.getValue();
        }
    }

    public static class TokenKey extends DynamicStruct {
        public BigInteger keyType;

        public KeyValue key;

        public TokenKey(BigInteger keyType, KeyValue key) {
            super(new Uint256(keyType), key);
            this.keyType = keyType;
            this.key = key;
        }

        public TokenKey(Uint256 keyType, KeyValue key) {
            super(keyType, key);
            this.keyType = keyType.getValue();
            this.key = key;
        }
    }

    public static class HederaToken extends DynamicStruct {
        public String name;

        public String symbol;

        public String treasury;

        public String memo;

        public Boolean tokenSupplyType;

        public BigInteger maxSupply;

        public Boolean freezeDefault;

        public List<TokenKey> tokenKeys;

        public Expiry expiry;

        public HederaToken(
                String name,
                String symbol,
                String treasury,
                String memo,
                Boolean tokenSupplyType,
                BigInteger maxSupply,
                Boolean freezeDefault,
                List<TokenKey> tokenKeys,
                Expiry expiry) {
            super(
                    new Utf8String(name),
                    new Utf8String(symbol),
                    new Address(160, treasury),
                    new Utf8String(memo),
                    new Bool(tokenSupplyType),
                    new Int64(maxSupply),
                    new Bool(freezeDefault),
                    new DynamicArray<TokenKey>(TokenKey.class, tokenKeys),
                    expiry);
            this.name = name;
            this.symbol = symbol;
            this.treasury = treasury;
            this.memo = memo;
            this.tokenSupplyType = tokenSupplyType;
            this.maxSupply = maxSupply;
            this.freezeDefault = freezeDefault;
            this.tokenKeys = tokenKeys;
            this.expiry = expiry;
        }

        public HederaToken(
                Utf8String name,
                Utf8String symbol,
                Address treasury,
                Utf8String memo,
                Bool tokenSupplyType,
                Int64 maxSupply,
                Bool freezeDefault,
                @Parameterized(type = TokenKey.class) DynamicArray<TokenKey> tokenKeys,
                Expiry expiry) {
            super(name, symbol, treasury, memo, tokenSupplyType, maxSupply, freezeDefault, tokenKeys, expiry);
            this.name = name.getValue();
            this.symbol = symbol.getValue();
            this.treasury = treasury.getValue();
            this.memo = memo.getValue();
            this.tokenSupplyType = tokenSupplyType.getValue();
            this.maxSupply = maxSupply.getValue();
            this.freezeDefault = freezeDefault.getValue();
            this.tokenKeys = tokenKeys.getValue();
            this.expiry = expiry;
        }
    }

    public static class TokenInfo extends DynamicStruct {
        public HederaToken token;

        public BigInteger totalSupply;

        public Boolean deleted;

        public Boolean defaultKycStatus;

        public Boolean pauseStatus;

        public List<FixedFee> fixedFees;

        public List<FractionalFee> fractionalFees;

        public List<RoyaltyFee> royaltyFees;

        public String ledgerId;

        public TokenInfo(
                HederaToken token,
                BigInteger totalSupply,
                Boolean deleted,
                Boolean defaultKycStatus,
                Boolean pauseStatus,
                List<FixedFee> fixedFees,
                List<FractionalFee> fractionalFees,
                List<RoyaltyFee> royaltyFees,
                String ledgerId) {
            super(
                    token,
                    new Int64(totalSupply),
                    new Bool(deleted),
                    new Bool(defaultKycStatus),
                    new Bool(pauseStatus),
                    new DynamicArray<FixedFee>(FixedFee.class, fixedFees),
                    new DynamicArray<FractionalFee>(FractionalFee.class, fractionalFees),
                    new DynamicArray<RoyaltyFee>(RoyaltyFee.class, royaltyFees),
                    new Utf8String(ledgerId));
            this.token = token;
            this.totalSupply = totalSupply;
            this.deleted = deleted;
            this.defaultKycStatus = defaultKycStatus;
            this.pauseStatus = pauseStatus;
            this.fixedFees = fixedFees;
            this.fractionalFees = fractionalFees;
            this.royaltyFees = royaltyFees;
            this.ledgerId = ledgerId;
        }

        public TokenInfo(
                HederaToken token,
                Int64 totalSupply,
                Bool deleted,
                Bool defaultKycStatus,
                Bool pauseStatus,
                @Parameterized(type = FixedFee.class) DynamicArray<FixedFee> fixedFees,
                @Parameterized(type = FractionalFee.class) DynamicArray<FractionalFee> fractionalFees,
                @Parameterized(type = RoyaltyFee.class) DynamicArray<RoyaltyFee> royaltyFees,
                Utf8String ledgerId) {
            super(
                    token,
                    totalSupply,
                    deleted,
                    defaultKycStatus,
                    pauseStatus,
                    fixedFees,
                    fractionalFees,
                    royaltyFees,
                    ledgerId);
            this.token = token;
            this.totalSupply = totalSupply.getValue();
            this.deleted = deleted.getValue();
            this.defaultKycStatus = defaultKycStatus.getValue();
            this.pauseStatus = pauseStatus.getValue();
            this.fixedFees = fixedFees.getValue();
            this.fractionalFees = fractionalFees.getValue();
            this.royaltyFees = royaltyFees.getValue();
            this.ledgerId = ledgerId.getValue();
        }
    }

    public static class FungibleTokenInfo extends DynamicStruct {
        public TokenInfo tokenInfo;

        public BigInteger decimals;

        public FungibleTokenInfo(TokenInfo tokenInfo, BigInteger decimals) {
            super(tokenInfo, new Int32(decimals));
            this.tokenInfo = tokenInfo;
            this.decimals = decimals;
        }

        public FungibleTokenInfo(TokenInfo tokenInfo, Int32 decimals) {
            super(tokenInfo, decimals);
            this.tokenInfo = tokenInfo;
            this.decimals = decimals.getValue();
        }
    }

    public static class NonFungibleTokenInfo extends DynamicStruct {
        public TokenInfo tokenInfo;

        public BigInteger serialNumber;

        public String ownerId;

        public BigInteger creationTime;

        public byte[] metadata;

        public String spenderId;

        public NonFungibleTokenInfo(
                TokenInfo tokenInfo,
                BigInteger serialNumber,
                String ownerId,
                BigInteger creationTime,
                byte[] metadata,
                String spenderId) {
            super(
                    tokenInfo,
                    new Int64(serialNumber),
                    new Address(160, ownerId),
                    new Int64(creationTime),
                    new DynamicBytes(metadata),
                    new Address(160, spenderId));
            this.tokenInfo = tokenInfo;
            this.serialNumber = serialNumber;
            this.ownerId = ownerId;
            this.creationTime = creationTime;
            this.metadata = metadata;
            this.spenderId = spenderId;
        }

        public NonFungibleTokenInfo(
                TokenInfo tokenInfo,
                Int64 serialNumber,
                Address ownerId,
                Int64 creationTime,
                DynamicBytes metadata,
                Address spenderId) {
            super(tokenInfo, serialNumber, ownerId, creationTime, metadata, spenderId);
            this.tokenInfo = tokenInfo;
            this.serialNumber = serialNumber.getValue();
            this.ownerId = ownerId.getValue();
            this.creationTime = creationTime.getValue();
            this.metadata = metadata.getValue();
            this.spenderId = spenderId.getValue();
        }
    }

    public static class CallResponseEventEventResponse extends BaseEventResponse {
        public Boolean param0;

        public byte[] param1;
    }
}
