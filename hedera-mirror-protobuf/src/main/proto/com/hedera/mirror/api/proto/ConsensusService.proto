syntax = "proto3";

package com.hedera.mirror.api.proto;

// Note: java_multiple_files is required for the reactor-grpc generator to work correctly.
option java_multiple_files = true;

option java_package = "com.hedera.mirror.api.proto";

import "BasicTypes.proto";
import "Timestamp.proto";

message ConsensusTopicQuery {
    .proto.TopicID topicID = 1; // A required topic ID to retrieve messages for.

    // Include messages which reached consensus on or after this time. Defaults to current time if not set.
    .proto.Timestamp consensusStartTime = 2;

    // Include messages which reached consensus before this time. If not set it will receive indefinitely.
    .proto.Timestamp consensusEndTime = 3;

    // The maximum number of messages to receive before stopping. If not set or set to zero it will return messages
    // indefinitely.
    uint64 limit = 4;
}

message ConsensusTopicResponse {
    .proto.Timestamp consensusTimestamp = 1; // The time at which the transaction reached consensus

    // The message body originally in the ConsensusSubmitMessageTransactionBody. Message size will be less than 4K.
    bytes message = 2;

    bytes runningHash = 3; // The running hash (SHA384) of every message.

    uint64 sequenceNumber = 4; // Starts at 1 for first submitted message. Incremented on each submitted message.
}

//
// The Mirror Service provides the ability to query a stream of Hedera Consensus Service (HCS) messages for an
// HCS Topic via a specific (possibly open-ended) time range.
//
service ConsensusService {
    rpc subscribeTopic (ConsensusTopicQuery) returns (stream ConsensusTopicResponse);
}
